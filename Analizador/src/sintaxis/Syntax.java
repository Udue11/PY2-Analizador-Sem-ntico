
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 29 01:39:07 CST 2023
//----------------------------------------------------

package sintaxis;

import java_cup.runtime.Symbol;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 29 01:39:07 CST 2023
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\254\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\003\000\002" +
    "\005\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\005\000\002\013\004\000" +
    "\002\013\004\000\002\014\004\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\003\000\002\016\005\000\002\016\005" +
    "\000\002\017\006\000\002\020\006\000\002\021\010\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\023\006\000\002\024\010\000\002\025\003\000\002\025" +
    "\003\000\002\026\003\000\002\026\003\000\002\027\006" +
    "\000\002\030\010\000\002\030\011\000\002\031\003\000" +
    "\002\031\003\000\002\032\003\000\002\032\003\000\002" +
    "\033\006\000\002\034\010\000\002\035\003\000\002\035" +
    "\003\000\002\036\003\000\002\036\003\000\002\037\006" +
    "\000\002\040\010\000\002\041\003\000\002\041\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\043" +
    "\007\000\002\044\007\000\002\045\007\000\002\046\007" +
    "\000\002\047\007\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\051\003\000\002" +
    "\051\003\000\002\052\003\000\002\052\003\000\002\053" +
    "\005\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\054\003\000" +
    "\002\055\003\000\002\055\005\000\002\055\005\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\057" +
    "\005\000\002\057\004\000\002\057\005\000\002\060\005" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\004\000\002\063\003\000\002\063\003\000\002\064\004" +
    "\000\002\064\003\000\002\065\006\000\002\066\010\000" +
    "\002\066\007\000\002\067\003\000\002\070\005\000\002" +
    "\071\007\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\073\011\000\002\074\007\000\002\074\010" +
    "\000\002\075\003\000\002\075\003\000\002\075\003\000" +
    "\002\075\003\000\002\076\010\000\002\077\003\000\002" +
    "\077\004\000\002\100\006\000\002\101\012\000\002\103" +
    "\003\000\002\103\003\000\002\103\003\000\002\103\003" +
    "\000\002\107\005\000\002\107\007\000\002\104\005\000" +
    "\002\104\004\000\002\105\011\000\002\106\011\000\002" +
    "\110\003\000\002\110\003\000\002\110\003\000\002\110" +
    "\003\000\002\110\003\000\002\110\003\000\002\111\003" +
    "\000\002\111\005\000\002\112\006\000\002\112\005\000" +
    "\002\113\004\000\002\114\003\000\002\114\003\000\002" +
    "\114\003\000\002\114\003\000\002\114\003\000\002\114" +
    "\003\000\002\114\003\000\002\114\003\000\002\114\003" +
    "\000\002\114\003\000\002\115\003\000\002\115\003\000" +
    "\002\115\003\000\002\116\004\000\002\117\003\000\002" +
    "\117\004\000\002\117\004\000\002\117\005\000\002\120" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\020\040\021\041\026\042\012\043\031\044" +
    "\010\066\025\067\013\001\002\000\020\040\uff68\041\uff68" +
    "\042\uff68\043\uff68\044\uff68\066\uff68\067\uff68\001\002\000" +
    "\004\002\uff56\001\002\000\020\040\uff61\041\uff61\042\uff61" +
    "\043\uff61\044\uff61\066\uff61\067\uff61\001\002\000\020\040" +
    "\050\041\026\042\012\043\031\044\010\066\025\067\013" +
    "\001\002\000\004\005\u0114\001\002\000\020\040\uff5f\041" +
    "\uff5f\042\uff5f\043\uff5f\044\uff5f\066\uff5f\067\uff5f\001\002" +
    "\000\004\005\uff7b\001\002\000\020\040\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\044\ufff3\066\ufff3\067\ufff3\001\002\000\004" +
    "\040\u0110\001\002\000\020\040\uff65\041\uff65\042\uff65\043" +
    "\uff65\044\uff65\066\uff65\067\uff65\001\002\000\020\040\uff5c" +
    "\041\uff5c\042\uff5c\043\uff5c\044\uff5c\066\uff5c\067\uff5c\001" +
    "\002\000\020\040\uff64\041\uff64\042\uff64\043\uff64\044\uff64" +
    "\066\uff64\067\uff64\001\002\000\020\040\uff5e\041\uff5e\042" +
    "\uff5e\043\uff5e\044\uff5e\066\uff5e\067\uff5e\001\002\000\004" +
    "\005\uff7d\001\002\000\020\040\uff63\041\uff63\042\uff63\043" +
    "\uff63\044\uff63\066\uff63\067\uff63\001\002\000\004\005\132" +
    "\001\002\000\020\040\uff5d\041\uff5d\042\uff5d\043\uff5d\044" +
    "\uff5d\066\uff5d\067\uff5d\001\002\000\020\040\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\066\ufff4\067\ufff4\001\002\000" +
    "\004\005\uff7c\001\002\000\022\002\uff5a\040\050\041\026" +
    "\042\012\043\031\044\010\066\025\067\013\001\002\000" +
    "\020\040\uff60\041\uff60\042\uff60\043\uff60\044\uff60\066\uff60" +
    "\067\uff60\001\002\000\004\005\uff7a\001\002\000\020\040" +
    "\uff66\041\uff66\042\uff66\043\uff66\044\uff66\066\uff66\067\uff66" +
    "\001\002\000\020\040\uff67\041\uff67\042\uff67\043\uff67\044" +
    "\uff67\066\uff67\067\uff67\001\002\000\020\040\uff62\041\uff62" +
    "\042\uff62\043\uff62\044\uff62\066\uff62\067\uff62\001\002\000" +
    "\004\002\036\001\002\000\004\002\001\001\002\000\004" +
    "\065\040\001\002\000\006\004\041\010\042\001\002\000" +
    "\050\022\uffce\023\uffce\035\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\051\uffce\052" +
    "\uffce\053\uffce\055\uffce\056\uffce\065\uffce\066\uffce\067\uffce" +
    "\001\002\000\006\063\045\065\043\001\002\000\004\004" +
    "\uffcf\001\002\000\004\004\046\001\002\000\004\004\uffd0" +
    "\001\002\000\050\022\uffcd\023\uffcd\035\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\055\uffcd\056\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\001\002\000\004\002\uff59\001\002\000\004" +
    "\005\uff7d\001\002\000\004\065\052\001\002\000\006\004" +
    "\053\010\054\001\002\000\050\022\uffe0\023\uffe0\035\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\051\uffe0\052\uffe0\053\uffe0\055\uffe0\056\uffe0" +
    "\065\uffe0\066\uffe0\067\uffe0\001\002\000\016\022\067\023" +
    "\065\032\062\061\056\062\063\065\066\001\002\000\022" +
    "\004\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\033\uffe6\001\002\000\022\004\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\033\uffe9\001\002\000" +
    "\022\004\uffe4\011\120\012\114\013\117\014\122\015\116" +
    "\016\121\033\uffe4\001\002\000\004\004\113\001\002\000" +
    "\004\065\112\001\002\000\016\022\067\023\065\032\062" +
    "\061\056\062\063\065\066\001\002\000\022\004\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\033\uffe8" +
    "\001\002\000\022\004\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\033\uffe5\001\002\000\024\004\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\033" +
    "\ufff5\065\ufff5\001\002\000\030\004\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\022\067\023\065\032" +
    "\070\033\uffe7\001\002\000\024\004\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\015\ufff6\016\ufff6\033\ufff6\065\ufff6\001" +
    "\002\000\020\033\103\036\102\037\073\061\075\062\101" +
    "\063\076\065\104\001\002\000\022\004\uffec\011\uffec\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\033\uffec\001\002" +
    "\000\006\007\uff6e\033\uff6e\001\002\000\014\004\uffff\007" +
    "\uffff\017\uffff\020\uffff\033\uffff\001\002\000\006\007\106" +
    "\033\uff6d\001\002\000\006\007\uff73\033\uff73\001\002\000" +
    "\006\007\uff71\033\uff71\001\002\000\004\033\105\001\002" +
    "\000\006\007\uff70\033\uff70\001\002\000\006\007\uff72\033" +
    "\uff72\001\002\000\014\004\000\007\000\017\000\020\000" +
    "\033\000\001\002\000\024\004\uff6a\007\uff6a\011\uff6a\012" +
    "\uff6a\013\uff6a\014\uff6a\015\uff6a\016\uff6a\033\uff6a\001\002" +
    "\000\010\007\uff6f\032\070\033\uff6f\001\002\000\024\004" +
    "\uff6b\007\uff6b\011\uff6b\012\uff6b\013\uff6b\014\uff6b\015\uff6b" +
    "\016\uff6b\033\uff6b\001\002\000\016\036\102\037\073\061" +
    "\075\062\101\063\076\065\104\001\002\000\004\033\uff6c" +
    "\001\002\000\004\033\111\001\002\000\006\004\uffe2\033" +
    "\uffe2\001\002\000\022\004\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\033\uffeb\001\002\000\050\022" +
    "\uffdf\023\uffdf\035\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\046\uffdf\047\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\055\uffdf\056\uffdf\065\uffdf\066\uffdf\067\uffdf\001\002" +
    "\000\016\022\ufffd\023\ufffd\032\ufffd\061\ufffd\062\ufffd\065" +
    "\ufffd\001\002\000\016\022\067\023\065\032\062\061\056" +
    "\062\063\065\066\001\002\000\016\022\ufffa\023\ufffa\032" +
    "\ufffa\061\ufffa\062\ufffa\065\ufffa\001\002\000\016\022\ufffc" +
    "\023\ufffc\032\ufffc\061\ufffc\062\ufffc\065\ufffc\001\002\000" +
    "\016\022\ufffe\023\ufffe\032\ufffe\061\ufffe\062\ufffe\065\ufffe" +
    "\001\002\000\016\022\ufff9\023\ufff9\032\ufff9\061\ufff9\062" +
    "\ufff9\065\ufff9\001\002\000\016\022\ufffb\023\ufffb\032\ufffb" +
    "\061\ufffb\062\ufffb\065\ufffb\001\002\000\006\004\uffe3\033" +
    "\uffe3\001\002\000\004\065\125\001\002\000\006\004\126" +
    "\010\127\001\002\000\050\022\uffdb\023\uffdb\035\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\047\uffdb\051\uffdb\052\uffdb\053\uffdb\055\uffdb\056\uffdb\065" +
    "\uffdb\066\uffdb\067\uffdb\001\002\000\016\022\067\023\065" +
    "\032\062\061\056\062\063\065\066\001\002\000\004\004" +
    "\131\001\002\000\050\022\uffda\023\uffda\035\uffda\040\uffda" +
    "\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047" +
    "\uffda\051\uffda\052\uffda\053\uffda\055\uffda\056\uffda\065\uffda" +
    "\066\uffda\067\uffda\001\002\000\004\065\133\001\002\000" +
    "\004\032\135\001\002\000\004\034\152\001\002\000\014" +
    "\033\142\040\136\041\141\042\137\043\143\001\002\000" +
    "\004\005\uff7d\001\002\000\004\005\uff7b\001\002\000\004" +
    "\033\151\001\002\000\004\005\uff7c\001\002\000\004\034" +
    "\uff76\001\002\000\004\005\uff7a\001\002\000\004\005\145" +
    "\001\002\000\004\065\146\001\002\000\006\007\147\033" +
    "\uff79\001\002\000\012\040\136\041\141\042\137\043\143" +
    "\001\002\000\004\033\uff78\001\002\000\004\034\uff77\001" +
    "\002\000\042\022\067\023\065\040\213\041\172\042\223" +
    "\043\206\044\010\045\215\046\157\047\214\051\170\052" +
    "\171\053\153\055\160\056\156\065\174\001\002\000\004" +
    "\032\374\001\002\000\044\022\uffb9\023\uffb9\035\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9" +
    "\047\uffb9\051\uffb9\052\uffb9\053\uffb9\055\uffb9\056\uffb9\065" +
    "\uffb9\001\002\000\044\022\uffb7\023\uffb7\035\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047" +
    "\uffb7\051\uffb7\052\uffb7\053\uffb7\055\uffb7\056\uffb7\065\uffb7" +
    "\001\002\000\014\036\102\037\073\061\365\062\367\065" +
    "\366\001\002\000\004\032\350\001\002\000\004\004\347" +
    "\001\002\000\044\022\uff9c\023\uff9c\035\uff9c\040\uff9c\041" +
    "\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c" +
    "\051\uff9c\052\uff9c\053\uff9c\055\uff9c\056\uff9c\065\uff9c\001" +
    "\002\000\044\022\uffdc\023\uffdc\035\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\051" +
    "\uffdc\052\uffdc\053\uffdc\055\uffdc\056\uffdc\065\uffdc\001\002" +
    "\000\044\022\uffd8\023\uffd8\035\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\051\uffd8" +
    "\052\uffd8\053\uffd8\055\uffd8\056\uffd8\065\uffd8\001\002\000" +
    "\044\022\uffd1\023\uffd1\035\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\051\uffd1\052" +
    "\uffd1\053\uffd1\055\uffd1\056\uffd1\065\uffd1\001\002\000\044" +
    "\022\uff99\023\uff99\035\uff99\040\uff99\041\uff99\042\uff99\043" +
    "\uff99\044\uff99\045\uff99\046\uff99\047\uff99\051\uff99\052\uff99" +
    "\053\uff99\055\uff99\056\uff99\065\uff99\001\002\000\044\022" +
    "\uffcc\023\uffcc\035\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\047\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\055\uffcc\056\uffcc\065\uffcc\001\002\000\044\022\uffbf" +
    "\023\uffbf\035\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\046\uffbf\047\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\055\uffbf\056\uffbf\065\uffbf\001\002\000\004\032\320\001" +
    "\002\000\004\032\255\001\002\000\004\005\124\001\002" +
    "\000\004\004\312\001\002\000\012\010\307\022\067\023" +
    "\065\032\070\001\002\000\004\004\306\001\002\000\044" +
    "\022\uffc1\023\uffc1\035\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\055\uffc1\056\uffc1\065\uffc1\001\002\000\044\022" +
    "\uff98\023\uff98\035\uff98\040\uff98\041\uff98\042\uff98\043\uff98" +
    "\044\uff98\045\uff98\046\uff98\047\uff98\051\uff98\052\uff98\053" +
    "\uff98\055\uff98\056\uff98\065\uff98\001\002\000\044\022\uffb8" +
    "\023\uffb8\035\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\055\uffb8\056\uffb8\065\uffb8\001\002\000\044\022\uff9d\023" +
    "\uff9d\035\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d" +
    "\045\uff9d\046\uff9d\047\uff9d\051\uff9d\052\uff9d\053\uff9d\055" +
    "\uff9d\056\uff9d\065\uff9d\001\002\000\044\022\uff96\023\uff96" +
    "\035\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045" +
    "\uff96\046\uff96\047\uff96\051\uff96\052\uff96\053\uff96\055\uff96" +
    "\056\uff96\065\uff96\001\002\000\044\022\uff9f\023\uff9f\035" +
    "\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f" +
    "\046\uff9f\047\uff9f\051\uff9f\052\uff9f\053\uff9f\055\uff9f\056" +
    "\uff9f\065\uff9f\001\002\000\044\022\uffd2\023\uffd2\035\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\051\uffd2\052\uffd2\053\uffd2\055\uffd2\056\uffd2" +
    "\065\uffd2\001\002\000\044\022\067\023\065\035\uff93\040" +
    "\213\041\172\042\223\043\206\044\010\045\215\046\157" +
    "\047\214\051\170\052\171\053\153\055\160\056\156\065" +
    "\174\001\002\000\004\005\037\001\002\000\044\022\uffde" +
    "\023\uffde\035\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044" +
    "\uffde\045\uffde\046\uffde\047\uffde\051\uffde\052\uffde\053\uffde" +
    "\055\uffde\056\uffde\065\uffde\001\002\000\044\022\uffc6\023" +
    "\uffc6\035\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\051\uffc6\052\uffc6\053\uffc6\055" +
    "\uffc6\056\uffc6\065\uffc6\001\002\000\044\022\uffc2\023\uffc2" +
    "\035\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\051\uffc2\052\uffc2\053\uffc2\055\uffc2" +
    "\056\uffc2\065\uffc2\001\002\000\044\022\uffb6\023\uffb6\035" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\051\uffb6\052\uffb6\053\uffb6\055\uffb6\056" +
    "\uffb6\065\uffb6\001\002\000\004\005\051\001\002\000\004" +
    "\032\255\001\002\000\004\032\250\001\002\000\044\022" +
    "\uffc4\023\uffc4\035\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\055\uffc4\056\uffc4\065\uffc4\001\002\000\044\022\uffc3" +
    "\023\uffc3\035\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\055\uffc3\056\uffc3\065\uffc3\001\002\000\044\022\uff9a\023" +
    "\uff9a\035\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a" +
    "\045\uff9a\046\uff9a\047\uff9a\051\uff9a\052\uff9a\053\uff9a\055" +
    "\uff9a\056\uff9a\065\uff9a\001\002\000\044\022\uffa0\023\uffa0" +
    "\035\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045" +
    "\uffa0\046\uffa0\047\uffa0\051\uffa0\052\uffa0\053\uffa0\055\uffa0" +
    "\056\uffa0\065\uffa0\001\002\000\044\022\uffc0\023\uffc0\035" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0\055\uffc0\056" +
    "\uffc0\065\uffc0\001\002\000\004\005\235\001\002\000\044" +
    "\022\uffcb\023\uffcb\035\uffcb\040\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\055\uffcb\056\uffcb\065\uffcb\001\002\000\044\022" +
    "\uffdd\023\uffdd\035\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\047\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\055\uffdd\056\uffdd\065\uffdd\001\002\000\044\022\uff95" +
    "\023\uff95\035\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044" +
    "\uff95\045\uff95\046\uff95\047\uff95\051\uff95\052\uff95\053\uff95" +
    "\055\uff95\056\uff95\065\uff95\001\002\000\004\035\234\001" +
    "\002\000\044\022\uffc5\023\uffc5\035\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\055\uffc5\056\uffc5\065\uffc5\001\002" +
    "\000\044\022\uff9b\023\uff9b\035\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\051\uff9b" +
    "\052\uff9b\053\uff9b\055\uff9b\056\uff9b\065\uff9b\001\002\000" +
    "\044\022\uff9e\023\uff9e\035\uff9e\040\uff9e\041\uff9e\042\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\051\uff9e\052" +
    "\uff9e\053\uff9e\055\uff9e\056\uff9e\065\uff9e\001\002\000\044" +
    "\022\uffd9\023\uffd9\035\uffd9\040\uffd9\041\uffd9\042\uffd9\043" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\055\uffd9\056\uffd9\065\uffd9\001\002\000\020\040" +
    "\uff74\041\uff74\042\uff74\043\uff74\044\uff74\066\uff74\067\uff74" +
    "\001\002\000\004\065\236\001\002\000\006\004\237\010" +
    "\240\001\002\000\050\022\uffd5\023\uffd5\035\uffd5\040\uffd5" +
    "\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047" +
    "\uffd5\051\uffd5\052\uffd5\053\uffd5\055\uffd5\056\uffd5\065\uffd5" +
    "\066\uffd5\067\uffd5\001\002\000\012\021\244\036\102\037" +
    "\073\065\242\001\002\000\004\004\247\001\002\000\004" +
    "\004\uffd6\001\002\000\004\004\uffd7\001\002\000\010\036" +
    "\102\037\073\065\242\001\002\000\004\004\246\001\002" +
    "\000\050\022\uffd3\023\uffd3\035\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\055\uffd3\056\uffd3\065\uffd3\066\uffd3\067" +
    "\uffd3\001\002\000\050\022\uffd4\023\uffd4\035\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\051\uffd4\052\uffd4\053\uffd4\055\uffd4\056\uffd4\065\uffd4" +
    "\066\uffd4\067\uffd4\001\002\000\004\065\251\001\002\000" +
    "\004\033\252\001\002\000\004\004\253\001\002\000\044" +
    "\022\uffbe\023\uffbe\035\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\055\uffbe\056\uffbe\065\uffbe\001\002\000\004\034" +
    "\275\001\002\000\014\021\263\032\262\036\102\037\073" +
    "\065\260\001\002\000\010\017\uffa5\020\uffa5\033\274\001" +
    "\002\000\006\017\266\020\267\001\002\000\010\017\uffa6" +
    "\020\uffa6\033\uffa6\001\002\000\010\017\uffa7\020\uffa7\033" +
    "\uffa7\001\002\000\014\021\263\032\262\036\102\037\073" +
    "\065\260\001\002\000\014\021\263\032\262\036\102\037" +
    "\073\065\260\001\002\000\010\017\uffa5\020\uffa5\033\uffa5" +
    "\001\002\000\010\017\266\020\267\033\uffa3\001\002\000" +
    "\014\021\ufff8\032\ufff8\036\ufff8\037\ufff8\065\ufff8\001\002" +
    "\000\014\021\ufff7\032\ufff7\036\ufff7\037\ufff7\065\ufff7\001" +
    "\002\000\014\021\263\032\262\036\102\037\073\065\260" +
    "\001\002\000\010\017\266\020\267\033\uffa4\001\002\000" +
    "\010\017\uffa5\020\uffa5\033\273\001\002\000\010\017\uffa2" +
    "\020\uffa2\033\uffa2\001\002\000\004\034\uffa1\001\002\000" +
    "\042\022\067\023\065\040\213\041\172\042\223\043\206" +
    "\044\010\045\215\046\157\047\214\051\170\052\171\053" +
    "\153\055\160\056\156\065\174\001\002\000\004\035\277" +
    "\001\002\000\046\022\uff90\023\uff90\035\uff90\040\uff90\041" +
    "\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90" +
    "\050\300\051\uff90\052\uff90\053\uff90\055\uff90\056\uff90\065" +
    "\uff90\001\002\000\004\034\302\001\002\000\044\022\uff91" +
    "\023\uff91\035\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044" +
    "\uff91\045\uff91\046\uff91\047\uff91\051\uff91\052\uff91\053\uff91" +
    "\055\uff91\056\uff91\065\uff91\001\002\000\042\022\067\023" +
    "\065\040\213\041\172\042\223\043\206\044\010\045\215" +
    "\046\157\047\214\051\170\052\171\053\153\055\160\056" +
    "\156\065\174\001\002\000\004\035\304\001\002\000\044" +
    "\022\uff92\023\uff92\035\uff92\040\uff92\041\uff92\042\uff92\043" +
    "\uff92\044\uff92\045\uff92\046\uff92\047\uff92\051\uff92\052\uff92" +
    "\053\uff92\055\uff92\056\uff92\065\uff92\001\002\000\004\035" +
    "\uff94\001\002\000\044\022\uffea\023\uffea\035\uffea\040\uffea" +
    "\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047" +
    "\uffea\051\uffea\052\uffea\053\uffea\055\uffea\056\uffea\065\uffea" +
    "\001\002\000\016\022\067\023\065\032\062\061\056\062" +
    "\063\065\066\001\002\000\004\004\311\001\002\000\044" +
    "\022\uffe1\023\uffe1\035\uffe1\040\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\051\uffe1\052\uffe1" +
    "\053\uffe1\055\uffe1\056\uffe1\065\uffe1\001\002\000\044\022" +
    "\uff69\023\uff69\035\uff69\040\uff69\041\uff69\042\uff69\043\uff69" +
    "\044\uff69\045\uff69\046\uff69\047\uff69\051\uff69\052\uff69\053" +
    "\uff69\055\uff69\056\uff69\065\uff69\001\002\000\004\034\314" +
    "\001\002\000\042\022\067\023\065\040\213\041\172\042" +
    "\223\043\206\044\010\045\215\046\157\047\214\051\170" +
    "\052\171\053\153\055\160\056\156\065\174\001\002\000" +
    "\004\035\316\001\002\000\046\022\uff88\023\uff88\035\uff88" +
    "\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\046" +
    "\uff88\047\uff88\050\300\051\uff88\052\uff88\053\uff88\055\uff88" +
    "\056\uff88\065\uff88\001\002\000\044\022\uff87\023\uff87\035" +
    "\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87" +
    "\046\uff87\047\uff87\051\uff87\052\uff87\053\uff87\055\uff87\056" +
    "\uff87\065\uff87\001\002\000\004\065\321\001\002\000\004" +
    "\033\322\001\002\000\004\034\323\001\002\000\004\057" +
    "\324\001\002\000\004\005\336\001\002\000\004\060\331" +
    "\001\002\000\006\057\324\060\uff81\001\002\000\004\060" +
    "\uff80\001\002\000\004\035\335\001\002\000\004\006\332" +
    "\001\002\000\042\022\067\023\065\040\213\041\172\042" +
    "\223\043\206\044\010\045\215\046\157\047\214\051\170" +
    "\052\171\053\153\055\160\056\156\065\174\001\002\000" +
    "\002\001\002\000\004\035\uff7f\001\002\000\044\022\uff7e" +
    "\023\uff7e\035\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044" +
    "\uff7e\045\uff7e\046\uff7e\047\uff7e\051\uff7e\052\uff7e\053\uff7e" +
    "\055\uff7e\056\uff7e\065\uff7e\001\002\000\012\061\340\062" +
    "\341\063\343\064\342\001\002\000\004\006\344\001\002" +
    "\000\004\006\uff86\001\002\000\004\006\uff85\001\002\000" +
    "\004\006\uff83\001\002\000\004\006\uff84\001\002\000\042" +
    "\022\067\023\065\040\213\041\172\042\223\043\206\044" +
    "\010\045\215\046\157\047\214\051\170\052\171\053\153" +
    "\055\160\056\156\065\174\001\002\000\002\001\002\000" +
    "\006\057\uff82\060\uff82\001\002\000\044\022\uff97\023\uff97" +
    "\035\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045" +
    "\uff97\046\uff97\047\uff97\051\uff97\052\uff97\053\uff97\055\uff97" +
    "\056\uff97\065\uff97\001\002\000\012\061\351\062\353\064" +
    "\354\065\352\001\002\000\004\033\363\001\002\000\004" +
    "\033\361\001\002\000\004\033\357\001\002\000\004\033" +
    "\355\001\002\000\004\004\356\001\002\000\044\022\uffbb" +
    "\023\uffbb\035\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044" +
    "\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\055\uffbb\056\uffbb\065\uffbb\001\002\000\004\004\360\001" +
    "\002\000\044\022\uffbc\023\uffbc\035\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\055\uffbc\056\uffbc\065\uffbc\001\002" +
    "\000\004\004\362\001\002\000\044\022\uffba\023\uffba\035" +
    "\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba" +
    "\046\uffba\047\uffba\051\uffba\052\uffba\053\uffba\055\uffba\056" +
    "\uffba\065\uffba\001\002\000\004\004\364\001\002\000\044" +
    "\022\uffbd\023\uffbd\035\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\055\uffbd\056\uffbd\065\uffbd\001\002\000\004\004" +
    "\ufff2\001\002\000\006\004\uffef\032\070\001\002\000\004" +
    "\004\ufff1\001\002\000\004\004\uffee\001\002\000\004\004" +
    "\ufff0\001\002\000\004\004\373\001\002\000\044\022\uffed" +
    "\023\uffed\035\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044" +
    "\uffed\045\uffed\046\uffed\047\uffed\051\uffed\052\uffed\053\uffed" +
    "\055\uffed\056\uffed\065\uffed\001\002\000\004\061\375\001" +
    "\002\000\006\004\u0106\033\uff8f\001\002\000\004\033\uff8a" +
    "\001\002\000\004\033\uff8c\001\002\000\004\033\uff8b\001" +
    "\002\000\004\033\u0102\001\002\000\004\034\u0103\001\002" +
    "\000\042\022\067\023\065\040\213\041\172\042\223\043" +
    "\206\044\010\045\215\046\157\047\214\051\170\052\171" +
    "\053\153\055\160\056\156\065\174\001\002\000\004\035" +
    "\u0105\001\002\000\044\022\uff89\023\uff89\035\uff89\040\uff89" +
    "\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\046\uff89\047" +
    "\uff89\051\uff89\052\uff89\053\uff89\055\uff89\056\uff89\065\uff89" +
    "\001\002\000\004\061\u0107\001\002\000\006\004\u0108\033" +
    "\uff8e\001\002\000\004\061\u0109\001\002\000\004\033\uff8d" +
    "\001\002\000\006\054\u010b\065\052\001\002\000\004\032" +
    "\135\001\002\000\004\034\u010d\001\002\000\042\022\067" +
    "\023\065\040\213\041\172\042\223\043\206\044\010\045" +
    "\215\046\157\047\214\051\170\052\171\053\153\055\160" +
    "\056\156\065\174\001\002\000\004\035\u010f\001\002\000" +
    "\022\002\uff75\040\uff75\041\uff75\042\uff75\043\uff75\044\uff75" +
    "\066\uff75\067\uff75\001\002\000\004\005\u0113\001\002\000" +
    "\022\002\uff58\040\050\041\026\042\012\043\031\044\010" +
    "\066\025\067\013\001\002\000\004\002\uff57\001\002\000" +
    "\004\054\u010b\001\002\000\004\065\u0115\001\002\000\006" +
    "\004\u0116\010\u0117\001\002\000\050\022\uffc8\023\uffc8\035" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\051\uffc8\052\uffc8\053\uffc8\055\uffc8\056" +
    "\uffc8\065\uffc8\066\uffc8\067\uffc8\001\002\000\006\064\u0119" +
    "\065\u0118\001\002\000\004\004\uffc9\001\002\000\004\004" +
    "\uffca\001\002\000\004\004\u011b\001\002\000\050\022\uffc7" +
    "\023\uffc7\035\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\046\uffc7\047\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\055\uffc7\056\uffc7\065\uffc7\066\uffc7\067\uffc7\001\002\000" +
    "\006\002\uff5b\040\uff5b\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\050\007\015\020\003\021\032\023\031\024" +
    "\014\027\016\030\021\033\033\034\005\037\027\040\010" +
    "\103\022\105\026\106\017\114\023\115\006\116\013\117" +
    "\004\120\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\007\015\020\003\021\032\023" +
    "\031\024\014\027\016\030\021\033\033\034\005\037\027" +
    "\040\010\103\022\106\017\114\023\115\006\116\u011b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\105\u0110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\007\015\020\003\021\032\023\031\024\014\027\016\030" +
    "\021\033\033\034\005\037\027\040\010\103\022\106\017" +
    "\114\023\115\006\116\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\060\013\063\015\056\016\057\112\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\060" +
    "\013\063\015\056\016\107\112\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\070" +
    "\001\001\000\002\001\001\000\012\002\077\110\073\111" +
    "\076\112\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\077\110\073\111\106" +
    "\112\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\060\013\063\015\056\016\122\112" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\060\013\063\015\056\016\127\112\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\104\133\001\001\000\002\001\001\000\006\103" +
    "\143\107\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\103\143\107\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\114\005\060\011\201\013\174" +
    "\014\166\017\206\020\224\021\161\022\215\023\232\024" +
    "\162\025\216\027\203\030\163\031\210\033\165\034\223" +
    "\035\175\037\207\040\227\041\221\042\220\043\202\044" +
    "\153\045\177\046\154\047\211\050\231\061\164\062\176" +
    "\063\204\064\226\066\200\073\230\074\217\101\160\112" +
    "\172\113\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\370\010\371\112\367\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\114\005\060\011\201\013\174\014\166\017" +
    "\206\020\224\021\161\022\215\023\232\024\162\025\216" +
    "\027\203\030\163\031\210\033\165\034\223\035\175\037" +
    "\207\040\227\041\221\042\220\043\202\044\153\045\177" +
    "\046\154\047\211\050\231\061\164\062\176\063\204\064" +
    "\304\066\200\073\230\074\217\101\160\112\172\113\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\253\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\242\026\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\242\026\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\260\056\256\057\255\001\001\000\002\001\001" +
    "\000\004\004\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\260\056\256\057\271\001\001\000\010" +
    "\002\260\056\264\057\263\001\001\000\002\001\001\000" +
    "\004\004\267\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\260\056\270\057\263\001\001\000\004\004" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\114\005\060\011\201\013\174\014\166\017" +
    "\206\020\224\021\161\022\215\023\232\024\162\025\216" +
    "\027\203\030\163\031\210\033\165\034\223\035\175\037" +
    "\207\040\227\041\221\042\220\043\202\044\153\045\177" +
    "\046\154\047\211\050\231\061\164\062\176\063\204\064" +
    "\275\066\200\073\230\074\217\101\160\112\172\113\225" +
    "\001\001\000\002\001\001\000\004\065\300\001\001\000" +
    "\002\001\001\000\002\001\001\000\114\005\060\011\201" +
    "\013\174\014\166\017\206\020\224\021\161\022\215\023" +
    "\232\024\162\025\216\027\203\030\163\031\210\033\165" +
    "\034\223\035\175\037\207\040\227\041\221\042\220\043" +
    "\202\044\153\045\177\046\154\047\211\050\231\061\164" +
    "\062\176\063\204\064\302\066\200\073\230\074\217\101" +
    "\160\112\172\113\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\060\013\063\015\056\016\307\112\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\114\005\060\011\201\013\174\014\166\017\206" +
    "\020\224\021\161\022\215\023\232\024\162\025\216\027" +
    "\203\030\163\031\210\033\165\034\223\035\175\037\207" +
    "\040\227\041\221\042\220\043\202\044\153\045\177\046" +
    "\154\047\211\050\231\061\164\062\176\063\204\064\314" +
    "\066\200\073\230\074\217\101\160\112\172\113\225\001" +
    "\001\000\002\001\001\000\004\065\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\076\325\077\324\001\001\000\002\001\001" +
    "\000\004\100\327\001\001\000\006\076\325\077\326\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\114\005\060\011\201\013\174\014\166\017\206\020" +
    "\224\021\161\022\215\023\232\024\162\025\216\027\203" +
    "\030\163\031\210\033\165\034\223\035\175\037\207\040" +
    "\227\041\221\042\220\043\202\044\153\045\177\046\154" +
    "\047\211\050\231\061\164\062\176\063\204\064\332\066" +
    "\200\073\230\074\217\101\160\112\172\113\225\001\001" +
    "\000\004\012\333\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\075\336\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\114\005\060\011\201\013\174\014\166\017\206" +
    "\020\224\021\161\022\215\023\232\024\162\025\216\027" +
    "\203\030\163\031\210\033\165\034\223\035\175\037\207" +
    "\040\227\041\221\042\220\043\202\044\153\045\177\046" +
    "\154\047\211\050\231\061\164\062\176\063\204\064\344" +
    "\066\200\073\230\074\217\101\160\112\172\113\225\001" +
    "\001\000\004\012\345\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\067\376\070\377\071\375\072" +
    "\u0100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\114\005\060\011\201\013\174\014\166\017\206" +
    "\020\224\021\161\022\215\023\232\024\162\025\216\027" +
    "\203\030\163\031\210\033\165\034\223\035\175\037\207" +
    "\040\227\041\221\042\220\043\202\044\153\045\177\046" +
    "\154\047\211\050\231\061\164\062\176\063\204\064\u0103" +
    "\066\200\073\230\074\217\101\160\112\172\113\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\104\u010b\001\001\000\002\001\001" +
    "\000\114\005\060\011\201\013\174\014\166\017\206\020" +
    "\224\021\161\022\215\023\232\024\162\025\216\027\203" +
    "\030\163\031\210\033\165\034\223\035\175\037\207\040" +
    "\227\041\221\042\220\043\202\044\153\045\177\046\154" +
    "\047\211\050\231\061\164\062\176\063\204\064\u010d\066" +
    "\200\073\230\074\217\101\160\112\172\113\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\007\015\020\003\021\032\023\031\024\014\027\016" +
    "\030\021\033\033\034\005\037\027\040\010\103\022\106" +
    "\017\114\023\115\006\116\u0111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\u0119\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    // Método que se invoca cuando ocurre un error de sintaxis
   public void syntax_error(Symbol s){
    if (s == null) {
        System.err.println("El objeto Symbol proporcionado es nulo.");
        return;
    }
    this.s = s;
    System.err.println("Error de sintaxis en la línea " + s.left + ", columna " + s.right + ": se encontró " + s.value);
}

    // Devuelve el símbolo actual
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {



    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;

    StringBuffer cod3D = new StringBuffer();
    int currentTemp = 1;

    public void imprimirTablaSimbolos(){
        for (String key : listaTablasSimbolos.keySet()){
            System.out.println("Tabla de simbolo: "+ key);
            System.out.println("Valores: ");
            for (String item : listaTablasSimbolos.get(key)){
                 System.out.println(item);
            }
            
            System.out.println("");
        }
    }
 public void imprimirCod3D() {
        System.out.println(cod3D.toString());
    }
 public String obtenerCod3D() {
    return cod3D.toString();
    }

public String determinarTipo(String valor) {
    return null;
        }




  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // INICIO ::= PROGRAMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",78, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // PROGRAMA ::= VALORESPROGRAMA FUNCMAIN VALORESPROGRAMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",77, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // PROGRAMA ::= VALORESPROGRAMA FUNCMAIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",77, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // PROGRAMA ::= FUNCMAIN VALORESPROGRAMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",77, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // PROGRAMA ::= FUNCMAIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",77, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // VALORESPROGRAMA ::= VALORPROGRAMA VALORESPROGRAMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESPROGRAMA",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // VALORPROGRAMA ::= COMENTARIOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORPROGRAMA",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // VALORPROGRAMA ::= GLOBALVAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORPROGRAMA",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // VALORPROGRAMA ::= CREAFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORPROGRAMA",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // GLOBALVAR ::= CREAASIGVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",74, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // GLOBALVAR ::= CREAVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",74, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // GLOBALVAR ::= CREAASIGVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",74, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // GLOBALVAR ::= CREAVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",74, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // GLOBALVAR ::= CREAASIGVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",74, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // GLOBALVAR ::= CREAVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",74, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // GLOBALVAR ::= CREAASIGVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",74, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // GLOBALVAR ::= CREAVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",74, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // GLOBALVAR ::= CREAASIGVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",74, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // GLOBALVAR ::= CREAVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",74, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SENTLLAMARFUNC ::= LLAMARFUNC ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTLLAMARFUNC",73, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // LLAMARFUNC ::= IDENTIFICADOR SIGABREPARENT SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMARFUNC",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LLAMARFUNC ::= IDENTIFICADOR SIGABREPARENT PARAMLLAMAFUNC SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMARFUNC",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // PARAMLLAMAFUNC ::= PARAMLLAMARFUNC COMA PARAMLLAMAFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMAFUNC",71, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // PARAMLLAMAFUNC ::= PARAMLLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMAFUNC",71, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PARAMLLAMARFUNC ::= LLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",70, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // PARAMLLAMARFUNC ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",70, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // PARAMLLAMARFUNC ::= LITBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",70, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PARAMLLAMARFUNC ::= LITCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",70, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PARAMLLAMARFUNC ::= LITFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",70, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PARAMLLAMARFUNC ::= LITINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",70, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CREAFUNC ::= TIPOSPARAM SEPARADOR IDENTIFICADOR PARAMFUNCIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAFUNC",68, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // FUNCMAIN ::= TIPOINT SEPARADOR RESERVMAIN PARAMFUNCIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCMAIN",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PARAMFUNCIONES ::= SIGABREPARENT SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCIONES",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PARAMFUNCIONES ::= SIGABREPARENT PARMFUNC SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCIONES",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // PARMFUNC ::= TIPOSPARAM SEPARADOR IDENTIFICADOR COMA PARMFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARMFUNC",69, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // PARMFUNC ::= TIPOSPARAM SEPARADOR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARMFUNC",69, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TIPOSPARAM ::= TIPOCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",65, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TIPOSPARAM ::= TIPOBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",65, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TIPOSPARAM ::= TIPOFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",65, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TIPOSPARAM ::= TIPOINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",65, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ESTRUCTSWITCH ::= RESERVSWITCH SIGABREPARENT IDENTIFICADOR SIGCIERRAPARENT SIGABRELLAVES CASES DEFAULT SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTSWITCH",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DEFAULT ::= RESERVDEFAULT DOSPUNTOS BLOQUECODIGO SENTBREAK 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DEFAULT",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CASES ::= CASE CASES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASES",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CASES ::= CASE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASES",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CASE ::= RESERVCASE SEPARADOR LITERAL DOSPUNTOS BLOQUECODIGO SENTBREAK 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LITERAL ::= LITSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LITERAL ::= LITCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LITERAL ::= LITFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LITERAL ::= LITINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ESTRUCTWHILE ::= RESERVWHILE CONDICIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES ESTRUCTELSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTWHILE",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ESTRUCTWHILE ::= RESERVWHILE CONDICIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTWHILE",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ESTRUCTFORRANGE ::= RESERVFORRANGE SIGABREPARENT PARAMFORRANGE SIGCIERRAPARENT SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTFORRANGE",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PARAMFORRANGE ::= PARAMFORRANGETRES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGE",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PARAMFORRANGE ::= PARAMFORRANGEDOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGE",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PARAMFORRANGE ::= PARAMFORRANGEUNO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGE",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PARAMFORRANGETRES ::= LITINT ENDLINE LITINT ENDLINE LITINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGETRES",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PARAMFORRANGEDOS ::= LITINT ENDLINE LITINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGEDOS",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PARAMFORRANGEUNO ::= LITINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGEUNO",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ESTRUCTIF ::= RESERVIF CONDICIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTIF",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ESTRUCTIF ::= RESERVIF CONDICIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES ESTRUCTELSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTIF",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ESTRUCTELSE ::= RESERVELSE SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTELSE",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // BLOQUECODIGO ::= VALORESBLOQUECODIGO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUECODIGO",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // BLOQUECODIGO ::= VALORESBLOQUECODIGO BLOQUECODIGO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUECODIGO",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VALORESBLOQUECODIGO ::= SENTLLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALORESBLOQUECODIGO ::= SENTRETURN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALORESBLOQUECODIGO ::= RESERVBREAK ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALORESBLOQUECODIGO ::= ESTRUCTCONTROL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALORESBLOQUECODIGO ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ESTRUCTCONTROL ::= ESTRUCTWHILE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ESTRUCTCONTROL ::= ESTRUCTFORRANGE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ESTRUCTCONTROL ::= ESTRUCTSWITCH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ESTRUCTCONTROL ::= ESTRUCTIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA ::= FUNCESCRIBIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA ::= FUNCLEER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONDICIONES ::= SIGABREPARENT OPERACIONLOGICAS SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICIONES",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERACIONLOGICAS ::= SIGABREPARENT OPERACIONLOGICAS SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICAS",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERACIONLOGICAS ::= SIGNEGACION OPERANDOSLOGICOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICAS",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERACIONLOGICAS ::= OPERANDOSLOGICOS OPERADORESLOGICOS OPERANDOSLOGICOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICAS",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERANDOSLOGICOS ::= OPERACIONLOGICAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOSLOGICOS",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERANDOSLOGICOS ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOSLOGICOS",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERANDOSLOGICOS ::= LITBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOSLOGICOS",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERACIONRELAARIT ::= SIGABREPARENT OPERACIONRELAARIT SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONRELAARIT",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERACIONRELAARIT ::= OPERANDOSRELAARIT OPERADORESRELA OPERACIONRELAARIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONRELAARIT",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERACIONRELAARIT ::= OPERANDOSRELAARIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONRELAARIT",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERANDOSRELAARIT ::= VALORESARIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOSRELAARIT",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERADORESRELA ::= OPERADORESBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERADORESRELA ::= SIGMAYORIGUAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERADORESRELA ::= SIGMAYOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERADORESRELA ::= SIGMENORIGUAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERADORESRELA ::= SIGMENOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERACIONBOOL ::= OPERANDOBOOLEANO OPERADORESBOOL OPERANDOBOOLEANO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONBOOL",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERANDOBOOLEANO ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOBOOLEANO",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERANDOBOOLEANO ::= LITBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOBOOLEANO",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERADORESBOOL ::= SIGDIFERENTE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESBOOL",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERADORESBOOL ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESBOOL",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCESCRIBIR ::= FUNCESCRIBIRID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCESCRIBIR ::= FUNCESCRIBIRSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCESCRIBIR ::= FUNCESCRIBIRFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUNCESCRIBIR ::= FUNCESCRIBIRINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCESCRIBIRID ::= RESERVESCRIBIR SIGABREPARENT IDENTIFICADOR SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRID",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCESCRIBIRSTRING ::= RESERVESCRIBIR SIGABREPARENT LITSTRING SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRSTRING",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCESCRIBIRFLOAT ::= RESERVESCRIBIR SIGABREPARENT LITFLOAT SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRFLOAT",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCESCRIBIRINT ::= RESERVESCRIBIR SIGABREPARENT LITINT SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRINT",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNCLEER ::= RESERVLEER SIGABREPARENT IDENTIFICADOR SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCLEER",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VARIABLES ::= OPERACIONUNARIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VARIABLES ::= VARIABLESSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VARIABLES ::= VARIABLESCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VARIABLES ::= VARIABLESBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VARIABLES ::= VARIABLESFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VARIABLES ::= VARIABLESINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VARIABLESSTRING ::= CREAASIGVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESSTRING",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VARIABLESSTRING ::= CREAVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESSTRING",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CREAASIGVARSTRING ::= TIPOSTRING SEPARADOR IDENTIFICADOR SIGNOIGUAL VALORESSTRING ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARSTRING",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CREAVARSTRING ::= TIPOSTRING SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARSTRING",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VALORESSTRING ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESSTRING",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VALORESSTRING ::= LITSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESSTRING",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARIABLESCHAR ::= CREAASIGVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESCHAR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VARIABLESCHAR ::= CREAVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESCHAR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CREAASIGVARCHAR ::= TIPOCHAR SEPARADOR IDENTIFICADOR SIGNOIGUAL VALORESCHAR ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARCHAR",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CREAVARCHAR ::= TIPOCHAR SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARCHAR",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALORESCHAR ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESCHAR",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALORESCHAR ::= LITCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESCHAR",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VARIABLESBOOL ::= CREAASIGVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESBOOL",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VARIABLESBOOL ::= CREAVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESBOOL",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CREAASIGVARBOOL ::= TIPOBOOL SEPARADOR IDENTIFICADOR SIGNOIGUAL SIGNEGACION VALORESBOOL ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARBOOL",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CREAASIGVARBOOL ::= TIPOBOOL SEPARADOR IDENTIFICADOR SIGNOIGUAL VALORESBOOL ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARBOOL",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CREAVARBOOL ::= TIPOBOOL SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARBOOL",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALORESBOOL ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBOOL",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALORESBOOL ::= LITBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBOOL",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VARIABLESFLOAT ::= CREAASIGVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESFLOAT",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VARIABLESFLOAT ::= CREAVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESFLOAT",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CREAASIGVARFLOAT ::= TIPOFLOAT SEPARADOR IDENTIFICADOR SIGNOIGUAL OPERACIONARIT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARFLOAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CREAVARFLOAT ::= TIPOFLOAT SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARFLOAT",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VARIABLESINT ::= CREAASIGVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESINT",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VARIABLESINT ::= CREAVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESINT",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARIABLESINT ::= ASIGNVAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESINT",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CREAASIGVARINT ::= TIPOINT SEPARADOR IDENTIFICADOR SIGNOIGUAL OPERACIONARIT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARINT",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CREAVARINT ::= TIPOINT SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARINT",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNVAR ::= IDENTIFICADOR SIGNOIGUAL OPERACIONARIT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNVAR",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACIONARIT ::= SIGABREPARENT OPERACIONARIT SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONARIT",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACIONARIT ::= VALORESARIT OPERADORESARITME OPERACIONARIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONARIT",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACIONARIT ::= VALORESARIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONARIT",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALORESARIT ::= OPERAUNARIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALORESARIT ::= LLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALORESARIT ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALORESARIT ::= LITFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VALORESARIT ::= LITINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERACIONUNARIA ::= OPERAUNARIA ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONUNARIA",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPERAUNARIA ::= OPERADORESUNARIOS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERAUNARIA",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPERAUNARIA ::= IDENTIFICADOR OPERADORESUNARIOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERAUNARIA",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTRETURN ::= RESERVRETURN DATOSRETORNO ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTRETURN",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DATOSRETORNO ::= LLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DATOSRETORNO ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DATOSRETORNO ::= LITBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DATOSRETORNO ::= LITFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DATOSRETORNO ::= LITINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COMENTARIOS ::= COMENTARIOMULTIPLE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COMENTARIOS ::= COMENTARIOSIMPLE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OPERADORESUNARIOS ::= SIGDIMINU 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESUNARIOS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OPERADORESUNARIOS ::= SIGAUMEN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESUNARIOS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OPERADORESLOGICOS ::= SIGDISYUNCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPERADORESLOGICOS ::= SIGCONJUNCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPERADORESARITME ::= SIGPOT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPERADORESARITME ::= SIGMOD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPERADORESARITME ::= SIGDIV 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPERADORESARITME ::= SIGMULTI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPERADORESARITME ::= SIGSUMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OPERADORESARITME ::= SIGRESTA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LITBOOL ::= LITFALSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITBOOL",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // LITBOOL ::= LITTRUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITBOOL",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

