
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 31 23:45:02 CST 2023
//----------------------------------------------------

package sintaxis;

import java_cup.runtime.Symbol;
import java.util.List;
import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Collection;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 31 23:45:02 CST 2023
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\257\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\003\000\002" +
    "\005\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\005\000\002\013\004\000" +
    "\002\013\004\000\002\014\004\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\003\000\002\016\005\000\002\016\005" +
    "\000\002\017\006\000\002\020\006\000\002\021\010\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\023\006\000\002\024\010\000\002\025\003\000\002\025" +
    "\003\000\002\026\003\000\002\026\003\000\002\032\006" +
    "\000\002\033\010\000\002\033\011\000\002\034\003\000" +
    "\002\034\003\000\002\035\003\000\002\035\003\000\002" +
    "\036\006\000\002\037\010\000\002\040\003\000\002\040" +
    "\003\000\002\041\003\000\002\041\003\000\002\042\006" +
    "\000\002\043\010\000\002\044\003\000\002\044\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\046" +
    "\007\000\002\047\007\000\002\050\007\000\002\051\007" +
    "\000\002\052\007\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\054\003\000\002" +
    "\054\003\000\002\055\003\000\002\055\003\000\002\056" +
    "\005\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\057\003\000" +
    "\002\060\003\000\002\060\005\000\002\060\005\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\062" +
    "\005\000\002\062\004\000\002\062\005\000\002\063\005" +
    "\000\002\064\003\000\002\064\003\000\002\064\003\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\004\000\002\066\003\000\002\066\003\000\002\067\004" +
    "\000\002\067\003\000\002\070\006\000\002\071\012\000" +
    "\002\071\011\000\002\031\002\000\002\030\002\000\002" +
    "\072\003\000\002\073\005\000\002\074\007\000\002\075" +
    "\003\000\002\075\003\000\002\075\003\000\002\076\011" +
    "\000\002\077\007\000\002\077\010\000\002\100\003\000" +
    "\002\100\003\000\002\100\003\000\002\100\003\000\002" +
    "\101\010\000\002\102\003\000\002\102\004\000\002\103" +
    "\006\000\002\104\012\000\002\105\003\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\111\005\000" +
    "\002\027\003\000\002\027\005\000\002\106\005\000\002" +
    "\106\004\000\002\107\011\000\002\110\011\000\002\112" +
    "\003\000\002\112\003\000\002\112\003\000\002\112\003" +
    "\000\002\112\003\000\002\112\003\000\002\113\003\000" +
    "\002\113\005\000\002\114\006\000\002\114\005\000\002" +
    "\115\004\000\002\116\003\000\002\116\003\000\002\116" +
    "\003\000\002\116\003\000\002\116\003\000\002\116\003" +
    "\000\002\116\003\000\002\116\003\000\002\116\003\000" +
    "\002\116\003\000\002\117\003\000\002\117\003\000\002" +
    "\117\003\000\002\120\004\000\002\121\003\000\002\121" +
    "\004\000\002\121\004\000\002\121\005\000\002\122\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\020\040\021\041\026\042\012\043\031\044" +
    "\010\066\025\067\013\001\002\000\004\002\uff53\001\002" +
    "\000\020\040\uff65\041\uff65\042\uff65\043\uff65\044\uff65\066" +
    "\uff65\067\uff65\001\002\000\020\040\uff5e\041\uff5e\042\uff5e" +
    "\043\uff5e\044\uff5e\066\uff5e\067\uff5e\001\002\000\020\040" +
    "\050\041\026\042\012\043\031\044\010\066\025\067\013" +
    "\001\002\000\004\005\u0118\001\002\000\020\040\uff5c\041" +
    "\uff5c\042\uff5c\043\uff5c\044\uff5c\066\uff5c\067\uff5c\001\002" +
    "\000\004\005\uff79\001\002\000\020\040\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\044\ufff3\066\ufff3\067\ufff3\001\002\000\004" +
    "\040\u0114\001\002\000\020\040\uff62\041\uff62\042\uff62\043" +
    "\uff62\044\uff62\066\uff62\067\uff62\001\002\000\020\040\uff59" +
    "\041\uff59\042\uff59\043\uff59\044\uff59\066\uff59\067\uff59\001" +
    "\002\000\020\040\uff61\041\uff61\042\uff61\043\uff61\044\uff61" +
    "\066\uff61\067\uff61\001\002\000\020\040\uff5b\041\uff5b\042" +
    "\uff5b\043\uff5b\044\uff5b\066\uff5b\067\uff5b\001\002\000\004" +
    "\005\uff7b\001\002\000\020\040\uff60\041\uff60\042\uff60\043" +
    "\uff60\044\uff60\066\uff60\067\uff60\001\002\000\020\040\uff5a" +
    "\041\uff5a\042\uff5a\043\uff5a\044\uff5a\066\uff5a\067\uff5a\001" +
    "\002\000\004\005\132\001\002\000\020\040\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\066\ufff4\067\ufff4\001\002\000" +
    "\004\005\uff7a\001\002\000\022\002\uff57\040\050\041\026" +
    "\042\012\043\031\044\010\066\025\067\013\001\002\000" +
    "\020\040\uff5d\041\uff5d\042\uff5d\043\uff5d\044\uff5d\066\uff5d" +
    "\067\uff5d\001\002\000\004\005\uff78\001\002\000\020\040" +
    "\uff63\041\uff63\042\uff63\043\uff63\044\uff63\066\uff63\067\uff63" +
    "\001\002\000\020\040\uff64\041\uff64\042\uff64\043\uff64\044" +
    "\uff64\066\uff64\067\uff64\001\002\000\020\040\uff5f\041\uff5f" +
    "\042\uff5f\043\uff5f\044\uff5f\066\uff5f\067\uff5f\001\002\000" +
    "\004\002\036\001\002\000\004\002\001\001\002\000\004" +
    "\065\040\001\002\000\006\004\041\010\042\001\002\000" +
    "\050\022\uffce\023\uffce\035\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\051\uffce\052" +
    "\uffce\053\uffce\055\uffce\056\uffce\065\uffce\066\uffce\067\uffce" +
    "\001\002\000\006\063\045\065\043\001\002\000\004\004" +
    "\uffcf\001\002\000\004\004\046\001\002\000\004\004\uffd0" +
    "\001\002\000\050\022\uffcd\023\uffcd\035\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\055\uffcd\056\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\001\002\000\004\002\uff56\001\002\000\004" +
    "\005\uff7b\001\002\000\004\065\052\001\002\000\006\004" +
    "\053\010\054\001\002\000\050\022\uffe0\023\uffe0\035\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\051\uffe0\052\uffe0\053\uffe0\055\uffe0\056\uffe0" +
    "\065\uffe0\066\uffe0\067\uffe0\001\002\000\016\022\067\023" +
    "\065\032\062\061\056\062\063\065\066\001\002\000\022" +
    "\004\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\033\uffe6\001\002\000\022\004\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\033\uffe9\001\002\000" +
    "\022\004\uffe4\011\120\012\114\013\117\014\122\015\116" +
    "\016\121\033\uffe4\001\002\000\004\004\113\001\002\000" +
    "\004\065\112\001\002\000\016\022\067\023\065\032\062" +
    "\061\056\062\063\065\066\001\002\000\022\004\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\033\uffe8" +
    "\001\002\000\022\004\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\033\uffe5\001\002\000\024\004\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\033" +
    "\ufff5\065\ufff5\001\002\000\030\004\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\022\067\023\065\032" +
    "\070\033\uffe7\001\002\000\024\004\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\015\ufff6\016\ufff6\033\ufff6\065\ufff6\001" +
    "\002\000\020\033\103\036\102\037\073\061\075\062\101" +
    "\063\076\065\104\001\002\000\022\004\uffec\011\uffec\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\033\uffec\001\002" +
    "\000\006\007\uff6b\033\uff6b\001\002\000\014\004\uffff\007" +
    "\uffff\017\uffff\020\uffff\033\uffff\001\002\000\006\007\106" +
    "\033\uff6a\001\002\000\006\007\uff70\033\uff70\001\002\000" +
    "\006\007\uff6e\033\uff6e\001\002\000\004\033\105\001\002" +
    "\000\006\007\uff6d\033\uff6d\001\002\000\006\007\uff6f\033" +
    "\uff6f\001\002\000\014\004\000\007\000\017\000\020\000" +
    "\033\000\001\002\000\024\004\uff67\007\uff67\011\uff67\012" +
    "\uff67\013\uff67\014\uff67\015\uff67\016\uff67\033\uff67\001\002" +
    "\000\010\007\uff6c\032\070\033\uff6c\001\002\000\024\004" +
    "\uff68\007\uff68\011\uff68\012\uff68\013\uff68\014\uff68\015\uff68" +
    "\016\uff68\033\uff68\001\002\000\016\036\102\037\073\061" +
    "\075\062\101\063\076\065\104\001\002\000\004\033\uff69" +
    "\001\002\000\004\033\111\001\002\000\006\004\uffe2\033" +
    "\uffe2\001\002\000\022\004\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\033\uffeb\001\002\000\050\022" +
    "\uffdf\023\uffdf\035\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\046\uffdf\047\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\055\uffdf\056\uffdf\065\uffdf\066\uffdf\067\uffdf\001\002" +
    "\000\016\022\ufffd\023\ufffd\032\ufffd\061\ufffd\062\ufffd\065" +
    "\ufffd\001\002\000\016\022\067\023\065\032\062\061\056" +
    "\062\063\065\066\001\002\000\016\022\ufffa\023\ufffa\032" +
    "\ufffa\061\ufffa\062\ufffa\065\ufffa\001\002\000\016\022\ufffc" +
    "\023\ufffc\032\ufffc\061\ufffc\062\ufffc\065\ufffc\001\002\000" +
    "\016\022\ufffe\023\ufffe\032\ufffe\061\ufffe\062\ufffe\065\ufffe" +
    "\001\002\000\016\022\ufff9\023\ufff9\032\ufff9\061\ufff9\062" +
    "\ufff9\065\ufff9\001\002\000\016\022\ufffb\023\ufffb\032\ufffb" +
    "\061\ufffb\062\ufffb\065\ufffb\001\002\000\006\004\uffe3\033" +
    "\uffe3\001\002\000\004\065\125\001\002\000\006\004\126" +
    "\010\127\001\002\000\050\022\uffdb\023\uffdb\035\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\047\uffdb\051\uffdb\052\uffdb\053\uffdb\055\uffdb\056\uffdb\065" +
    "\uffdb\066\uffdb\067\uffdb\001\002\000\016\022\067\023\065" +
    "\032\062\061\056\062\063\065\066\001\002\000\004\004" +
    "\131\001\002\000\050\022\uffda\023\uffda\035\uffda\040\uffda" +
    "\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047" +
    "\uffda\051\uffda\052\uffda\053\uffda\055\uffda\056\uffda\065\uffda" +
    "\066\uffda\067\uffda\001\002\000\004\065\133\001\002\000" +
    "\004\032\135\001\002\000\004\034\153\001\002\000\014" +
    "\033\140\040\136\041\142\042\137\043\145\001\002\000" +
    "\004\005\uff7b\001\002\000\004\005\uff79\001\002\000\004" +
    "\034\uff73\001\002\000\006\007\151\033\uff76\001\002\000" +
    "\004\005\uff7a\001\002\000\004\005\147\001\002\000\004" +
    "\033\146\001\002\000\004\005\uff78\001\002\000\004\034" +
    "\uff74\001\002\000\004\065\150\001\002\000\006\007\uff77" +
    "\033\uff77\001\002\000\012\040\136\041\142\042\137\043" +
    "\145\001\002\000\004\033\uff75\001\002\000\042\022\067" +
    "\023\065\040\215\041\172\042\224\043\210\044\010\045" +
    "\216\046\160\047\uff8f\051\171\052\173\053\154\055\161" +
    "\056\157\065\175\001\002\000\004\032\u0100\001\002\000" +
    "\044\022\uffb9\023\uffb9\035\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\051\uffb9\052" +
    "\uffb9\053\uffb9\055\uffb9\056\uffb9\065\uffb9\001\002\000\044" +
    "\022\uffb7\023\uffb7\035\uffb7\040\uffb7\041\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\055\uffb7\056\uffb7\065\uffb7\001\002\000\014\036" +
    "\102\037\073\061\371\062\372\065\373\001\002\000\004" +
    "\032\354\001\002\000\004\004\353\001\002\000\044\022" +
    "\uff9c\023\uff9c\035\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\047\uff9c\051\uff9c\052\uff9c\053" +
    "\uff9c\055\uff9c\056\uff9c\065\uff9c\001\002\000\044\022\uffdc" +
    "\023\uffdc\035\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\055\uffdc\056\uffdc\065\uffdc\001\002\000\044\022\uffd8\023" +
    "\uffd8\035\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8" +
    "\045\uffd8\046\uffd8\047\uffd8\051\uffd8\052\uffd8\053\uffd8\055" +
    "\uffd8\056\uffd8\065\uffd8\001\002\000\044\022\uffd1\023\uffd1" +
    "\035\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\051\uffd1\052\uffd1\053\uffd1\055\uffd1" +
    "\056\uffd1\065\uffd1\001\002\000\044\022\uff99\023\uff99\035" +
    "\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99" +
    "\046\uff99\047\uff99\051\uff99\052\uff99\053\uff99\055\uff99\056" +
    "\uff99\065\uff99\001\002\000\044\022\uffcc\023\uffcc\035\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffcc\055\uffcc\056\uffcc" +
    "\065\uffcc\001\002\000\044\022\uffbf\023\uffbf\035\uffbf\040" +
    "\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf" +
    "\047\uffbf\051\uffbf\052\uffbf\053\uffbf\055\uffbf\056\uffbf\065" +
    "\uffbf\001\002\000\004\032\324\001\002\000\004\005\124" +
    "\001\002\000\004\032\257\001\002\000\004\004\316\001" +
    "\002\000\012\010\313\022\067\023\065\032\070\001\002" +
    "\000\004\004\312\001\002\000\044\022\uffc1\023\uffc1\035" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\047\uffc1\051\uffc1\052\uffc1\053\uffc1\055\uffc1\056" +
    "\uffc1\065\uffc1\001\002\000\044\022\uff98\023\uff98\035\uff98" +
    "\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046" +
    "\uff98\047\uff98\051\uff98\052\uff98\053\uff98\055\uff98\056\uff98" +
    "\065\uff98\001\002\000\044\022\uffb8\023\uffb8\035\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8" +
    "\047\uffb8\051\uffb8\052\uffb8\053\uffb8\055\uffb8\056\uffb8\065" +
    "\uffb8\001\002\000\044\022\uff9d\023\uff9d\035\uff9d\040\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047" +
    "\uff9d\051\uff9d\052\uff9d\053\uff9d\055\uff9d\056\uff9d\065\uff9d" +
    "\001\002\000\044\022\uff96\023\uff96\035\uff96\040\uff96\041" +
    "\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96" +
    "\051\uff96\052\uff96\053\uff96\055\uff96\056\uff96\065\uff96\001" +
    "\002\000\044\022\uff9f\023\uff9f\035\uff9f\040\uff9f\041\uff9f" +
    "\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\051" +
    "\uff9f\052\uff9f\053\uff9f\055\uff9f\056\uff9f\065\uff9f\001\002" +
    "\000\044\022\uffd2\023\uffd2\035\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\055\uffd2\056\uffd2\065\uffd2\001\002\000" +
    "\044\022\067\023\065\035\uff93\040\215\041\172\042\224" +
    "\043\210\044\010\045\216\046\160\047\uff8f\051\171\052" +
    "\173\053\154\055\161\056\157\065\175\001\002\000\004" +
    "\047\255\001\002\000\004\005\037\001\002\000\044\022" +
    "\uffde\023\uffde\035\uffde\040\uffde\041\uffde\042\uffde\043\uffde" +
    "\044\uffde\045\uffde\046\uffde\047\uffde\051\uffde\052\uffde\053" +
    "\uffde\055\uffde\056\uffde\065\uffde\001\002\000\044\022\uffc6" +
    "\023\uffc6\035\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\051\uffc6\052\uffc6\053\uffc6" +
    "\055\uffc6\056\uffc6\065\uffc6\001\002\000\044\022\uffc2\023" +
    "\uffc2\035\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2" +
    "\045\uffc2\046\uffc2\047\uffc2\051\uffc2\052\uffc2\053\uffc2\055" +
    "\uffc2\056\uffc2\065\uffc2\001\002\000\044\022\uffb6\023\uffb6" +
    "\035\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\046\uffb6\047\uffb6\051\uffb6\052\uffb6\053\uffb6\055\uffb6" +
    "\056\uffb6\065\uffb6\001\002\000\004\005\051\001\002\000" +
    "\004\032\251\001\002\000\044\022\uffc4\023\uffc4\035\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\051\uffc4\052\uffc4\053\uffc4\055\uffc4\056\uffc4" +
    "\065\uffc4\001\002\000\044\022\uffc3\023\uffc3\035\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3" +
    "\047\uffc3\051\uffc3\052\uffc3\053\uffc3\055\uffc3\056\uffc3\065" +
    "\uffc3\001\002\000\044\022\uff9a\023\uff9a\035\uff9a\040\uff9a" +
    "\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047" +
    "\uff9a\051\uff9a\052\uff9a\053\uff9a\055\uff9a\056\uff9a\065\uff9a" +
    "\001\002\000\044\022\uffa0\023\uffa0\035\uffa0\040\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0" +
    "\051\uffa0\052\uffa0\053\uffa0\055\uffa0\056\uffa0\065\uffa0\001" +
    "\002\000\044\022\uffc0\023\uffc0\035\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\055\uffc0\056\uffc0\065\uffc0\001\002" +
    "\000\004\005\236\001\002\000\044\022\uffcb\023\uffcb\035" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\051\uffcb\052\uffcb\053\uffcb\055\uffcb\056" +
    "\uffcb\065\uffcb\001\002\000\044\022\uffdd\023\uffdd\035\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\051\uffdd\052\uffdd\053\uffdd\055\uffdd\056\uffdd" +
    "\065\uffdd\001\002\000\044\022\uff95\023\uff95\035\uff95\040" +
    "\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95" +
    "\047\uff95\051\uff95\052\uff95\053\uff95\055\uff95\056\uff95\065" +
    "\uff95\001\002\000\004\035\235\001\002\000\044\022\uffc5" +
    "\023\uffc5\035\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\055\uffc5\056\uffc5\065\uffc5\001\002\000\044\022\uff9b\023" +
    "\uff9b\035\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b" +
    "\045\uff9b\046\uff9b\047\uff9b\051\uff9b\052\uff9b\053\uff9b\055" +
    "\uff9b\056\uff9b\065\uff9b\001\002\000\044\022\uff9e\023\uff9e" +
    "\035\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045" +
    "\uff9e\046\uff9e\047\uff9e\051\uff9e\052\uff9e\053\uff9e\055\uff9e" +
    "\056\uff9e\065\uff9e\001\002\000\044\022\uffd9\023\uffd9\035" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\051\uffd9\052\uffd9\053\uffd9\055\uffd9\056" +
    "\uffd9\065\uffd9\001\002\000\020\040\uff71\041\uff71\042\uff71" +
    "\043\uff71\044\uff71\066\uff71\067\uff71\001\002\000\004\065" +
    "\237\001\002\000\006\004\240\010\241\001\002\000\050" +
    "\022\uffd5\023\uffd5\035\uffd5\040\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\055\uffd5\056\uffd5\065\uffd5\066\uffd5\067\uffd5\001" +
    "\002\000\012\021\245\036\102\037\073\065\243\001\002" +
    "\000\004\004\250\001\002\000\004\004\uffd6\001\002\000" +
    "\004\004\uffd7\001\002\000\010\036\102\037\073\065\243" +
    "\001\002\000\004\004\247\001\002\000\050\022\uffd3\023" +
    "\uffd3\035\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\045\uffd3\046\uffd3\047\uffd3\051\uffd3\052\uffd3\053\uffd3\055" +
    "\uffd3\056\uffd3\065\uffd3\066\uffd3\067\uffd3\001\002\000\050" +
    "\022\uffd4\023\uffd4\035\uffd4\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\055\uffd4\056\uffd4\065\uffd4\066\uffd4\067\uffd4\001" +
    "\002\000\004\065\252\001\002\000\004\033\253\001\002" +
    "\000\004\004\254\001\002\000\044\022\uffbe\023\uffbe\035" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\051\uffbe\052\uffbe\053\uffbe\055\uffbe\056" +
    "\uffbe\065\uffbe\001\002\000\004\032\257\001\002\000\004" +
    "\034\277\001\002\000\014\021\265\032\264\036\102\037" +
    "\073\065\262\001\002\000\010\017\uffa5\020\uffa5\033\276" +
    "\001\002\000\006\017\270\020\271\001\002\000\010\017" +
    "\uffa6\020\uffa6\033\uffa6\001\002\000\010\017\uffa7\020\uffa7" +
    "\033\uffa7\001\002\000\014\021\265\032\264\036\102\037" +
    "\073\065\262\001\002\000\014\021\265\032\264\036\102" +
    "\037\073\065\262\001\002\000\010\017\uffa5\020\uffa5\033" +
    "\uffa5\001\002\000\010\017\270\020\271\033\uffa3\001\002" +
    "\000\014\021\ufff8\032\ufff8\036\ufff8\037\ufff8\065\ufff8\001" +
    "\002\000\014\021\ufff7\032\ufff7\036\ufff7\037\ufff7\065\ufff7" +
    "\001\002\000\014\021\265\032\264\036\102\037\073\065" +
    "\262\001\002\000\010\017\270\020\271\033\uffa4\001\002" +
    "\000\010\017\uffa5\020\uffa5\033\275\001\002\000\010\017" +
    "\uffa2\020\uffa2\033\uffa2\001\002\000\004\034\uffa1\001\002" +
    "\000\042\022\067\023\065\040\215\041\172\042\224\043" +
    "\210\044\010\045\216\046\160\047\uff8f\051\171\052\173" +
    "\053\154\055\161\056\157\065\175\001\002\000\004\035" +
    "\301\001\002\000\046\022\uff8e\023\uff8e\035\uff8e\040\uff8e" +
    "\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047" +
    "\uff8e\050\302\051\uff8e\052\uff8e\053\uff8e\055\uff8e\056\uff8e" +
    "\065\uff8e\001\002\000\004\034\306\001\002\000\044\022" +
    "\uff90\023\uff90\035\uff90\040\uff90\041\uff90\042\uff90\043\uff90" +
    "\044\uff90\045\uff90\046\uff90\047\uff90\051\uff90\052\uff90\053" +
    "\uff90\055\uff90\056\uff90\065\uff90\001\002\000\044\022\uff8e" +
    "\023\uff8e\035\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044" +
    "\uff8e\045\uff8e\046\uff8e\047\uff8e\051\uff8e\052\uff8e\053\uff8e" +
    "\055\uff8e\056\uff8e\065\uff8e\001\002\000\044\022\uff91\023" +
    "\uff91\035\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91" +
    "\045\uff91\046\uff91\047\uff91\051\uff91\052\uff91\053\uff91\055" +
    "\uff91\056\uff91\065\uff91\001\002\000\042\022\067\023\065" +
    "\040\215\041\172\042\224\043\210\044\010\045\216\046" +
    "\160\047\uff8f\051\171\052\173\053\154\055\161\056\157" +
    "\065\175\001\002\000\004\035\310\001\002\000\044\022" +
    "\uff92\023\uff92\035\uff92\040\uff92\041\uff92\042\uff92\043\uff92" +
    "\044\uff92\045\uff92\046\uff92\047\uff92\051\uff92\052\uff92\053" +
    "\uff92\055\uff92\056\uff92\065\uff92\001\002\000\004\035\uff94" +
    "\001\002\000\044\022\uffea\023\uffea\035\uffea\040\uffea\041" +
    "\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea" +
    "\051\uffea\052\uffea\053\uffea\055\uffea\056\uffea\065\uffea\001" +
    "\002\000\016\022\067\023\065\032\062\061\056\062\063" +
    "\065\066\001\002\000\004\004\315\001\002\000\044\022" +
    "\uffe1\023\uffe1\035\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\047\uffe1\051\uffe1\052\uffe1\053" +
    "\uffe1\055\uffe1\056\uffe1\065\uffe1\001\002\000\044\022\uff66" +
    "\023\uff66\035\uff66\040\uff66\041\uff66\042\uff66\043\uff66\044" +
    "\uff66\045\uff66\046\uff66\047\uff66\051\uff66\052\uff66\053\uff66" +
    "\055\uff66\056\uff66\065\uff66\001\002\000\004\034\320\001" +
    "\002\000\042\022\067\023\065\040\215\041\172\042\224" +
    "\043\210\044\010\045\216\046\160\047\uff8f\051\171\052" +
    "\173\053\154\055\161\056\157\065\175\001\002\000\004" +
    "\035\322\001\002\000\046\022\uff86\023\uff86\035\uff86\040" +
    "\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86" +
    "\047\uff86\050\302\051\uff86\052\uff86\053\uff86\055\uff86\056" +
    "\uff86\065\uff86\001\002\000\044\022\uff85\023\uff85\035\uff85" +
    "\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046" +
    "\uff85\047\uff85\051\uff85\052\uff85\053\uff85\055\uff85\056\uff85" +
    "\065\uff85\001\002\000\004\065\325\001\002\000\004\033" +
    "\326\001\002\000\004\034\327\001\002\000\004\057\330" +
    "\001\002\000\004\005\342\001\002\000\004\060\335\001" +
    "\002\000\006\057\330\060\uff7f\001\002\000\004\060\uff7e" +
    "\001\002\000\004\035\341\001\002\000\004\006\336\001" +
    "\002\000\042\022\067\023\065\040\215\041\172\042\224" +
    "\043\210\044\010\045\216\046\160\047\uff8f\051\171\052" +
    "\173\053\154\055\161\056\157\065\175\001\002\000\002" +
    "\001\002\000\004\035\uff7d\001\002\000\044\022\uff7c\023" +
    "\uff7c\035\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c" +
    "\045\uff7c\046\uff7c\047\uff7c\051\uff7c\052\uff7c\053\uff7c\055" +
    "\uff7c\056\uff7c\065\uff7c\001\002\000\012\061\344\062\345" +
    "\063\347\064\346\001\002\000\004\006\350\001\002\000" +
    "\004\006\uff84\001\002\000\004\006\uff83\001\002\000\004" +
    "\006\uff81\001\002\000\004\006\uff82\001\002\000\042\022" +
    "\067\023\065\040\215\041\172\042\224\043\210\044\010" +
    "\045\216\046\160\047\uff8f\051\171\052\173\053\154\055" +
    "\161\056\157\065\175\001\002\000\002\001\002\000\006" +
    "\057\uff80\060\uff80\001\002\000\044\022\uff97\023\uff97\035" +
    "\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97" +
    "\046\uff97\047\uff97\051\uff97\052\uff97\053\uff97\055\uff97\056" +
    "\uff97\065\uff97\001\002\000\012\061\355\062\357\064\360" +
    "\065\356\001\002\000\004\033\367\001\002\000\004\033" +
    "\365\001\002\000\004\033\363\001\002\000\004\033\361" +
    "\001\002\000\004\004\362\001\002\000\044\022\uffbb\023" +
    "\uffbb\035\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb\055" +
    "\uffbb\056\uffbb\065\uffbb\001\002\000\004\004\364\001\002" +
    "\000\044\022\uffbc\023\uffbc\035\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\051\uffbc" +
    "\052\uffbc\053\uffbc\055\uffbc\056\uffbc\065\uffbc\001\002\000" +
    "\004\004\366\001\002\000\044\022\uffba\023\uffba\035\uffba" +
    "\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046" +
    "\uffba\047\uffba\051\uffba\052\uffba\053\uffba\055\uffba\056\uffba" +
    "\065\uffba\001\002\000\004\004\370\001\002\000\044\022" +
    "\uffbd\023\uffbd\035\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\046\uffbd\047\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\055\uffbd\056\uffbd\065\uffbd\001\002\000\004\004\ufff2" +
    "\001\002\000\004\004\ufff1\001\002\000\006\004\uffef\032" +
    "\070\001\002\000\004\004\uffee\001\002\000\004\004\ufff0" +
    "\001\002\000\004\004\377\001\002\000\044\022\uffed\023" +
    "\uffed\035\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\047\uffed\051\uffed\052\uffed\053\uffed\055" +
    "\uffed\056\uffed\065\uffed\001\002\000\004\061\u0101\001\002" +
    "\000\006\004\u010a\033\uff8d\001\002\000\004\033\uff88\001" +
    "\002\000\004\033\uff8a\001\002\000\004\033\uff89\001\002" +
    "\000\004\033\u0106\001\002\000\004\034\u0107\001\002\000" +
    "\042\022\067\023\065\040\215\041\172\042\224\043\210" +
    "\044\010\045\216\046\160\047\uff8f\051\171\052\173\053" +
    "\154\055\161\056\157\065\175\001\002\000\004\035\u0109" +
    "\001\002\000\044\022\uff87\023\uff87\035\uff87\040\uff87\041" +
    "\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87" +
    "\051\uff87\052\uff87\053\uff87\055\uff87\056\uff87\065\uff87\001" +
    "\002\000\004\061\u010b\001\002\000\006\004\u010c\033\uff8c" +
    "\001\002\000\004\061\u010d\001\002\000\004\033\uff8b\001" +
    "\002\000\006\054\u010f\065\052\001\002\000\004\032\135" +
    "\001\002\000\004\034\u0111\001\002\000\042\022\067\023" +
    "\065\040\215\041\172\042\224\043\210\044\010\045\216" +
    "\046\160\047\uff8f\051\171\052\173\053\154\055\161\056" +
    "\157\065\175\001\002\000\004\035\u0113\001\002\000\022" +
    "\002\uff72\040\uff72\041\uff72\042\uff72\043\uff72\044\uff72\066" +
    "\uff72\067\uff72\001\002\000\004\005\u0117\001\002\000\022" +
    "\002\uff55\040\050\041\026\042\012\043\031\044\010\066" +
    "\025\067\013\001\002\000\004\002\uff54\001\002\000\004" +
    "\054\u010f\001\002\000\004\065\u0119\001\002\000\006\004" +
    "\u011a\010\u011b\001\002\000\050\022\uffc8\023\uffc8\035\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\051\uffc8\052\uffc8\053\uffc8\055\uffc8\056\uffc8" +
    "\065\uffc8\066\uffc8\067\uffc8\001\002\000\006\064\u011d\065" +
    "\u011c\001\002\000\004\004\uffc9\001\002\000\004\004\uffca" +
    "\001\002\000\004\004\u011f\001\002\000\050\022\uffc7\023" +
    "\uffc7\035\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\051\uffc7\052\uffc7\053\uffc7\055" +
    "\uffc7\056\uffc7\065\uffc7\066\uffc7\067\uffc7\001\002\000\006" +
    "\002\uff58\040\uff58\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\050\007\015\020\004\021\032\023\031\024" +
    "\014\032\016\033\021\036\033\037\005\042\027\043\010" +
    "\105\023\107\026\110\017\116\022\117\006\120\013\121" +
    "\003\122\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\007\015\020\004\021\032\023" +
    "\031\024\014\032\016\033\021\036\033\037\005\042\027" +
    "\043\010\105\023\110\017\116\022\117\006\120\u011f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\107\u0114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\007\015\020\004\021\032\023\031\024\014\032\016\033" +
    "\021\036\033\037\005\042\027\043\010\105\023\110\017" +
    "\116\022\117\006\120\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\060\013\063\015\056\016\057\114\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\060" +
    "\013\063\015\056\016\107\114\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\070" +
    "\001\001\000\002\001\001\000\012\002\077\112\073\113" +
    "\076\114\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\077\112\073\113\106" +
    "\114\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\060\013\063\015\056\016\122\114" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\060\013\063\015\056\016\127\114\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\106\133\001\001\000\002\001\001\000\010\027" +
    "\143\105\142\111\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\027\151\105\142\111\140\001\001\000\002\001\001" +
    "\000\116\005\060\011\202\013\175\014\167\017\210\020" +
    "\225\021\162\022\216\023\233\024\163\025\217\031\206" +
    "\032\204\033\164\034\212\036\166\037\224\040\176\042" +
    "\211\043\230\044\222\045\221\046\203\047\154\050\200" +
    "\051\155\052\213\053\232\064\165\065\177\066\205\067" +
    "\227\071\201\076\231\077\220\104\161\114\173\115\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\374\010\375\114\373\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\316\001\001\000\002\001\001" +
    "\000\004\005\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\116\005\060\011\202\013\175\014\167\017\210\020\225" +
    "\021\162\022\216\023\233\024\163\025\217\031\206\032" +
    "\204\033\164\034\212\036\166\037\224\040\176\042\211" +
    "\043\230\044\222\045\221\046\203\047\154\050\200\051" +
    "\155\052\213\053\232\064\165\065\177\066\205\067\310" +
    "\071\201\076\231\077\220\104\161\114\173\115\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\243\026\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\243\026" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\255\001\001\000\002" +
    "\001\001\000\010\002\262\061\260\062\257\001\001\000" +
    "\002\001\001\000\004\004\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\262\061\260\062\273\001" +
    "\001\000\010\002\262\061\266\062\265\001\001\000\002" +
    "\001\001\000\004\004\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\262\061\272\062\265\001\001" +
    "\000\004\004\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\116\005\060\011\202\013\175" +
    "\014\167\017\210\020\225\021\162\022\216\023\233\024" +
    "\163\025\217\031\206\032\204\033\164\034\212\036\166" +
    "\037\224\040\176\042\211\043\230\044\222\045\221\046" +
    "\203\047\154\050\200\051\155\052\213\053\232\064\165" +
    "\065\177\066\205\067\277\071\201\076\231\077\220\104" +
    "\161\114\173\115\226\001\001\000\002\001\001\000\006" +
    "\030\302\070\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\304\001\001\000\002\001\001\000\116" +
    "\005\060\011\202\013\175\014\167\017\210\020\225\021" +
    "\162\022\216\023\233\024\163\025\217\031\206\032\204" +
    "\033\164\034\212\036\166\037\224\040\176\042\211\043" +
    "\230\044\222\045\221\046\203\047\154\050\200\051\155" +
    "\052\213\053\232\064\165\065\177\066\205\067\306\071" +
    "\201\076\231\077\220\104\161\114\173\115\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\060\013\063\015\056\016\313" +
    "\114\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\116\005\060\011\202" +
    "\013\175\014\167\017\210\020\225\021\162\022\216\023" +
    "\233\024\163\025\217\031\206\032\204\033\164\034\212" +
    "\036\166\037\224\040\176\042\211\043\230\044\222\045" +
    "\221\046\203\047\154\050\200\051\155\052\213\053\232" +
    "\064\165\065\177\066\205\067\320\071\201\076\231\077" +
    "\220\104\161\114\173\115\226\001\001\000\002\001\001" +
    "\000\004\070\322\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\101\331" +
    "\102\330\001\001\000\002\001\001\000\004\103\333\001" +
    "\001\000\006\101\331\102\332\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\116\005\060\011" +
    "\202\013\175\014\167\017\210\020\225\021\162\022\216" +
    "\023\233\024\163\025\217\031\206\032\204\033\164\034" +
    "\212\036\166\037\224\040\176\042\211\043\230\044\222" +
    "\045\221\046\203\047\154\050\200\051\155\052\213\053" +
    "\232\064\165\065\177\066\205\067\336\071\201\076\231" +
    "\077\220\104\161\114\173\115\226\001\001\000\004\012" +
    "\337\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\100\342\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\116" +
    "\005\060\011\202\013\175\014\167\017\210\020\225\021" +
    "\162\022\216\023\233\024\163\025\217\031\206\032\204" +
    "\033\164\034\212\036\166\037\224\040\176\042\211\043" +
    "\230\044\222\045\221\046\203\047\154\050\200\051\155" +
    "\052\213\053\232\064\165\065\177\066\205\067\350\071" +
    "\201\076\231\077\220\104\161\114\173\115\226\001\001" +
    "\000\004\012\351\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\072\u0102\073\u0103\074\u0101\075\u0104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\116\005\060\011\202\013\175\014\167\017\210\020" +
    "\225\021\162\022\216\023\233\024\163\025\217\031\206" +
    "\032\204\033\164\034\212\036\166\037\224\040\176\042" +
    "\211\043\230\044\222\045\221\046\203\047\154\050\200" +
    "\051\155\052\213\053\232\064\165\065\177\066\205\067" +
    "\u0107\071\201\076\231\077\220\104\161\114\173\115\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\106\u010f\001\001\000\002\001" +
    "\001\000\116\005\060\011\202\013\175\014\167\017\210" +
    "\020\225\021\162\022\216\023\233\024\163\025\217\031" +
    "\206\032\204\033\164\034\212\036\166\037\224\040\176" +
    "\042\211\043\230\044\222\045\221\046\203\047\154\050" +
    "\200\051\155\052\213\053\232\064\165\065\177\066\205" +
    "\067\u0111\071\201\076\231\077\220\104\161\114\173\115" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\007\015\020\004\021\032\023\031\024" +
    "\014\032\016\033\021\036\033\037\005\042\027\043\010" +
    "\105\023\110\017\116\022\117\006\120\u0115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\u011d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

//------------------------------------------------------------------------------------------------
    LexerCup lex;
    Symbol token;
    Boolean errores = false;
    private HashMap<String, ArrayList<String>> listaTablaSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;
    int currentTemp = 0;
    StringBuilder codIn3D = new StringBuilder();
    ArrayList<String> elementosArray = new ArrayList<>();
    ArrayList<String> elementosParametros = new ArrayList<>();
    int contador_for = 0;
    int contador_while = 0;
    int contador_if = 0;
    int contador_else = 0;
    int contador_switch = 0;
    String fatherCurrentHash = null;
    LinkedList<String> hashTree = new LinkedList<>();
    int currentHashPos = 0;
    StringBuilder mipsData = new StringBuilder();
    StringBuilder mipsMain = new StringBuilder();
    String stringCreationMips = "";
    int mipsTemp = 0;

    /* Constructor del parser, recibe como parámetro el LexerCup que se va a utilizar 
        Entradas: LexerCup lex
        Salidas: Ninguna
        Restricciones: Ninguna
    */

    @SuppressWarnings("deprecation")
    public void parser(LexerCup lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    
    /* Método que se encarga de retornar el valor booleao de errores. Indicando si hubo errores o no
        Entradas: Ninguna
        Salidas: errores
        Restricciones: Ninguna
    */
    public boolean getErrores(){
        return errores;
    }

    /* Método que se encarga de retornar el string buffer del código intermedio 3 direcciones
        Entradas: Ninguna
        Salidas: codIn3D
        Restricciones: Ninguna
    */
    public StringBuilder getCodIn3D(){
        return codIn3D;
    }

    /*
        Método que se encarga de retornar el string buffer del código MIPS
        Entradas: Ninguna
        Salidas: mipsData
        Restricciones: Ninguna
    */
    public StringBuilder getMipsData(){
        return mipsData;
    }

    /*
        Método que se encarga de retornar el string buffer del código MIPS
        Entradas: Ninguna
        Salidas: mipsMain
        Restricciones: Ninguna
    */
    public StringBuilder getMipsMain(){
        return mipsMain;
    }
    /* Método que se encarga de imprimir la tabla de símbolos
        Entradas: Ninguna
        Salidas: Ninguna
        Restricciones: Ninguna
    */
    private void imprimirTablaSimbolos(){
        for(String key: listaTablaSimbolos.keySet()){
            System.out.println("-------------------------");
            System.out.println("");
            System.out.println("Tabla de símbolos: "+key);
            System.out.println("Valores: ");
            for(String item: listaTablaSimbolos.get(key)){
                System.out.println(item);
            }

            System.out.println("");
        }

    }

     /* Método que se encarga de imprimir el string buffer del código intermedio 3 direcciones en la terminal.
        Entradas: Ninguna
        Salidas: Ninguna
        Restricciones: Ninguna
    */
    private void imprimirCodigo3D(){
        System.out.println("++++++++ CODIGO 3D +++++++++");
        System.out.println("");
        System.out.println(codIn3D.toString());
    }


    /* Método que se encarga de imprimir el string buffer del código MIPS en la terminal.
        Entradas: Ninguna
        Salidas: Ninguna
        Restricciones: Ninguna
    */
    private void imprimirCodigoMIPS(){
        System.out.println("++++++++ CODIGO MIPS +++++++++");
        System.out.println("");
        System.out.println(".data\n");
        System.out.println(mipsData.toString());
        System.out.println(".text\n");
        System.out.println(".globl main\n");
        System.out.println(mipsMain.toString());
        System.out.println("   li $v0, 10");
        System.out.println("   syscall");
    }


    /* Método que se encarga de imprimir el string buffer del código MIPS en un archivo .asm.
        Entradas: Ninguna
        Salidas: Ninguna
        Restricciones: Ninguna
    */
    private int addMipsTemp(){
        if (mipsTemp == 9){
            mipsTemp = 0;
        }else{
            mipsTemp++;
        }
        return mipsTemp;
    }

    /*
        Método que se encarga de retornar la tabla de símbolos
        Entradas: Ninguna
        Salidas: tabla de símbolos
        Restricciones: Ninguna
    */
    public HashMap<String, ArrayList<String>> getTablaSimbolos(){
        return listaTablaSimbolos;
    }

    /* Método que se encarga de imprimir en consola el error sintáctico
        Entradas: String error. Error que se va a imprimir
        Salidas: Ninguna. Imprime en consola el error
        Restricciones: Ninguna
    */
    private void manejoError(String error, String tipoError){
        errores = true;
        int linea = lex.getLine();
        int columna = lex.getColumn();
        System.out.println("Error "+tipoError+": "+ error +" (en la linea: " + linea + " y columna: " + columna+")");
        System.out.println("Se continua con el análisis "+tipoError);
    } 
 
    /* Método que se encarga de buscar en la tabla de símbolos actual un ID y devolver su tipo.
        Entradas: lista: lista de elementos de la tabla de símbolos actual, idBuscado: ID que se requiere buscar y queBusca: si busca el ID de una variable o de una función. 
        Salidas: String o null
        Restricciones: Ninguna
    */
     private String buscarID_o_tipoID(ArrayList<String> tablaSimbolos, String idBuscado, String queBusca) {
        int treeSize = hashTree.indexOf(hashTree.get(currentHashPos));
        for (int i = treeSize; i >= 0; i--) {
            tablaSimbolos = listaTablaSimbolos.get(hashTree.get(i));
            if(queBusca.equals("id")){
                // Recorre los elementos del ArrayList
                for (String elemento : tablaSimbolos) {
                    // Divide el elemento en ID y tipo
                    String[] partes = elemento.split(": ");
                    
                    if (partes[0].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                        return partes[1]; // Se encontró el ID y se envía el tipo del ID
                    }
                    if (partes[0].equals("Parámetro") && partes[1].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                        return partes[2].trim(); // Se encontró el ID y se envía el tipo del ID
                    }	
                }
            }
            else if(queBusca.equals("funcion")){
                // Recorre los elementos del ArrayList
                for (String elemento : tablaSimbolos) {
                    // Divide el elemento en ID y tipo
                    String[] partes = elemento.split(":");
                
                    if (partes[1].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                        return partes[2]; // Se encontró el ID de la función y se envía el tipo de la función
                    }
                }
            }
            else if(queBusca.equals("tamañoArray")){
                // Recorre los elementos del ArrayList
                for (String elemento : tablaSimbolos) {
                    // Divide el elemento en ID y tipo
                    String[] partes = elemento.split(": ");
                
                    if (partes[0].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                        return partes[2]; // Se encontró el ID de la función y se envía el tipo de la función
                    }
                }

            }
        }
        return null;       
    }


    public String existeFuncion(String idBuscado){
        Collection<ArrayList<String>> valores = listaTablaSimbolos.values();
        for (ArrayList<String> tablaSimbolos : valores){
            // Recorre los elementos del ArrayList
            for (String elemento : tablaSimbolos) {
                // Divide el elemento en ID y tipo
                String[] partes = elemento.split(":");
                if (partes[0].equals("tipo") && partes[2].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                    return partes[3].trim(); // Se encontró el ID de la función y se envía el tipo de la función
                }
            }
        }
        return null;   
    }

    private ArrayList<String> obtenerParametrosFuncion(String funcion){
        Collection<ArrayList<String>> valores = listaTablaSimbolos.values();
        ArrayList<String> parametros = new ArrayList<String>();
        for (ArrayList<String> tablaSimbolos : valores){
            // Recorre los elementos del ArrayList
            for (int i = 0; i < tablaSimbolos.size(); i++) {
                String elemento = tablaSimbolos.get(i);
                // Divide el elemento en ID y tipo
                String[] partes = elemento.split(":");
                if (partes[0].equals("tipo") && partes[2].equals(funcion)) { // Verifica si el ID coincide con el ID buscado
                    for (int j = i+1; j < tablaSimbolos.size(); j++){
                        String linea = tablaSimbolos.get(j); // Se encontró el ID de la función y se envía el tipo de la función
                        if(linea.contains("Parámetro")){
                            parametros.add(linea);
                        }
                    }
                    if (parametros.size() != 0){
                        return parametros;
                    }
                }
            }
        }
        return null;   
    }
    /*  Método que se encarga de verificar si todos los elementos de una lista tienen el mismo tipo de dato.
        Entradas: lista: lista de elementos en donde cada elemento contiene un string tipo: "elemento: tipo de dato". 
        Salidas: boolean, true o false.
        Restricciones: La lista NO puede estar vacía.
    */

    private String verificarTipo_elementosArray(ArrayList<String> lista, String tipoArray){

        for (int i = 0; i < lista.size(); i++) {
            String elemento = lista.get(i);
            String[] partesElemento = elemento.split(": ");
            String tipoDatoElemento = partesElemento[1].trim();

            if (!tipoDatoElemento.equals("error_semantico")){
                if (!tipoDatoElemento.equals(tipoArray)) {
                    return partesElemento[0]; // Los tipos de datos NO son iguales
                }
            }
            else{
                return "error_semantico";
            }  
        }

        return null; // Todos los elementos tienen el mismo tipo de dato
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {



    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;

    StringBuffer cod3D = new StringBuffer();
    int currentTemp = 1;

    public void imprimirTablaSimbolos(){
        for (String key : listaTablasSimbolos.keySet()){
            System.out.println("Tabla de simbolo: "+ key);
            System.out.println("Valores: ");
            for (String item : listaTablasSimbolos.get(key)){
                 System.out.println(item);
            }
            
            System.out.println("");
        }
    }
 public void imprimirCod3D() {
        System.out.println(cod3D.toString());
    }
 public String obtenerCod3D() {
    return cod3D.toString();
    }

public String determinarTipo(String valor) {
    return null;
        }




  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // INICIO ::= PROGRAMA 
            {
              Object RESULT =null;
		 imprimirTablaSimbolos(); imprimirCodigo3D();
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",80, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // PROGRAMA ::= VALORESPROGRAMA FUNCMAIN VALORESPROGRAMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",79, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // PROGRAMA ::= VALORESPROGRAMA FUNCMAIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",79, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // PROGRAMA ::= FUNCMAIN VALORESPROGRAMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",79, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // PROGRAMA ::= FUNCMAIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",79, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // VALORESPROGRAMA ::= VALORPROGRAMA VALORESPROGRAMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESPROGRAMA",78, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // VALORPROGRAMA ::= COMENTARIOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORPROGRAMA",77, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // VALORPROGRAMA ::= GLOBALVAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORPROGRAMA",77, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // VALORPROGRAMA ::= CREAFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORPROGRAMA",77, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // GLOBALVAR ::= CREAASIGVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // GLOBALVAR ::= CREAVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // GLOBALVAR ::= CREAASIGVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // GLOBALVAR ::= CREAVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // GLOBALVAR ::= CREAASIGVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // GLOBALVAR ::= CREAVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // GLOBALVAR ::= CREAASIGVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // GLOBALVAR ::= CREAVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // GLOBALVAR ::= CREAASIGVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // GLOBALVAR ::= CREAVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("GLOBALVAR",76, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTLLAMARFUNC ::= LLAMARFUNC ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTLLAMARFUNC",75, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // LLAMARFUNC ::= IDENTIFICADOR SIGABREPARENT SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMARFUNC",74, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // LLAMARFUNC ::= IDENTIFICADOR SIGABREPARENT PARAMLLAMAFUNC SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMARFUNC",74, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // PARAMLLAMAFUNC ::= PARAMLLAMARFUNC COMA PARAMLLAMAFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMAFUNC",73, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // PARAMLLAMAFUNC ::= PARAMLLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMAFUNC",73, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // PARAMLLAMARFUNC ::= LLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // PARAMLLAMARFUNC ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // PARAMLLAMARFUNC ::= LITBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PARAMLLAMARFUNC ::= LITCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // PARAMLLAMARFUNC ::= LITFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // PARAMLLAMARFUNC ::= LITINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMLLAMARFUNC",72, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CREAFUNC ::= TIPOSPARAM SEPARADOR IDENTIFICADOR PARAMFUNCIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		
           String tipoTabla;
           if(id.toString().equals("main")){
            tipoTabla = "tipo:funcion:"+id.toString()+": "+tip.toString();
           }
           else{
            tipoTabla = "tipo:funcion:"+id.toString()+": "+tip.toString();
           }
           if(existeFuncion(id.toString()) == null){
                ArrayList<String> listaSimbolos = new ArrayList<String>();
                currentHash = id.toString();
                listaSimbolos.add(tipoTabla);
                hashTree.addLast(currentHash);
                listaTablaSimbolos.put(currentHash, listaSimbolos);
                RESULT = tip.toString()+" "+id.toString();
                codIn3D.append("\n_"+id.toString()+"_begin:");
                mipsMain.append("\n"+id.toString()+":");
           }
           else{
                currentHash = id.toString();
                hashTree.addLast(currentHash);
                manejoError("Función "+id.toString()+" ya existe", "semántico");
           }
           

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAFUNC",70, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // FUNCMAIN ::= TIPOINT SEPARADOR RESERVMAIN PARAMFUNCIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		
                       String tipoTabla;
                       if(id.toString().equals("main")){
                        tipoTabla = "tipo:funcion:"+id.toString()+": "+tip.toString();
                       }
                       else{
                        tipoTabla = "tipo:funcion:"+id.toString()+": "+tip.toString();
                       }
                       if(existeFuncion(id.toString()) == null){
                            ArrayList<String> listaSimbolos = new ArrayList<String>();
                            currentHash = id.toString();
                            listaSimbolos.add(tipoTabla);
                            hashTree.addLast(currentHash);
                            listaTablaSimbolos.put(currentHash, listaSimbolos);
                            RESULT = tip.toString()+" "+id.toString();
                            codIn3D.append("\n_"+id.toString()+"_begin:");
                            mipsMain.append("\n"+id.toString()+":");
                       }
                       else{
                            currentHash = id.toString();
                            hashTree.addLast(currentHash);
                            manejoError("Función "+id.toString()+" ya existe", "semántico");
                       }
           

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCMAIN",69, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PARAMFUNCIONES ::= SIGABREPARENT SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCIONES",68, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PARAMFUNCIONES ::= SIGABREPARENT PARAMETROFUNCION SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFUNCIONES",68, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PARAMETROFUNCION ::= PARMFUNC COMA PARAMETROFUNCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETROFUNCION",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PARAMETROFUNCION ::= PARMFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETROFUNCION",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PARMFUNC ::= TIPOSPARAM SEPARADOR IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 listaTablaSimbolos.get(currentHash).add("Parámetro: "+id.toString()+": "+tip.toString());
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARMFUNC",71, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TIPOSPARAM ::= TIPOCHAR 
            {
              Object RESULT =null;
		 RESULT = "char";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TIPOSPARAM ::= TIPOBOOL 
            {
              Object RESULT =null;
		 RESULT = "boole";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TIPOSPARAM ::= TIPOFLOAT 
            {
              Object RESULT =null;
		 RESULT = "float";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TIPOSPARAM ::= TIPOINT 
            {
              Object RESULT =null;
		 RESULT = "int";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPOSPARAM",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ESTRUCTSWITCH ::= RESERVSWITCH SIGABREPARENT IDENTIFICADOR SIGCIERRAPARENT SIGABRELLAVES CASES DEFAULT SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTSWITCH",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DEFAULT ::= RESERVDEFAULT DOSPUNTOS BLOQUECODIGO SENTBREAK 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DEFAULT",65, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CASES ::= CASE CASES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASES",64, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CASES ::= CASE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASES",64, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CASE ::= RESERVCASE SEPARADOR LITERAL DOSPUNTOS BLOQUECODIGO SENTBREAK 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LITERAL ::= LITSTRING 
            {
              Object RESULT =null;
		int litstringleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litstringright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litstring = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litstring+": "+"string"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LITERAL ::= LITCHAR 
            {
              Object RESULT =null;
		int litcharleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litcharright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litchar = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litchar+": "+"char"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LITERAL ::= LITFLOAT 
            {
              Object RESULT =null;
		int litfloatleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litfloatright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litfloat = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litfloat.toString()+": "+"float"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LITERAL ::= LITINT 
            {
              Object RESULT =null;
		int litIntleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litIntright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litInt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litInt.toString()+": "+"int"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITERAL",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ESTRUCTWHILE ::= RESERVWHILE CONDICIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES ESTRUCTELSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTWHILE",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ESTRUCTWHILE ::= RESERVWHILE CONDICIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTWHILE",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ESTRUCTFORRANGE ::= RESERVFORRANGE SIGABREPARENT PARAMFORRANGE SIGCIERRAPARENT SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTFORRANGE",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PARAMFORRANGE ::= PARAMFORRANGETRES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGE",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PARAMFORRANGE ::= PARAMFORRANGEDOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGE",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PARAMFORRANGE ::= PARAMFORRANGEUNO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGE",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PARAMFORRANGETRES ::= LITINT ENDLINE LITINT ENDLINE LITINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGETRES",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PARAMFORRANGEDOS ::= LITINT ENDLINE LITINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGEDOS",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PARAMFORRANGEUNO ::= LITINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMFORRANGEUNO",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FINIF ::= 
            {
              Object RESULT =null;
		    codIn3D.append("\n_end_if_"+(contador_if)+":");
                mipsMain.append("\n_end_if_"+(contador_if)+":");
             
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FINIF",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INICIOIF ::= 
            {
              Object RESULT =null;
		 String tipoTabla = "tipo:condicional:if";
                ArrayList<String> listaSimbolos = new ArrayList<String>();
                
                fatherCurrentHash = currentHash;
                currentHash = "if_"+(++contador_if)+"_"+ hashTree.get(currentHashPos);
                listaSimbolos.add(tipoTabla);
                hashTree.addLast(currentHash);
                currentHashPos++;
                listaTablaSimbolos.put(currentHash, listaSimbolos);
                codIn3D.append("\n_if_" + contador_if + ":");
                mipsMain.append("\n_if_" + contador_if + ":");
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIOIF",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ESTRUCTIF ::= INICIOIF RESERVIF CONDICIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES FINIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTIF",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ESTRUCTIF ::= INICIOIF RESERVIF CONDICIONES SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES ESTRUCTELSE FINIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTIF",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ESTRUCTELSE ::= RESERVELSE SIGABRELLAVES BLOQUECODIGO SIGCIERRALLAVES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTELSE",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // BLOQUECODIGO ::= VALORESBLOQUECODIGO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUECODIGO",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // BLOQUECODIGO ::= VALORESBLOQUECODIGO BLOQUECODIGO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUECODIGO",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VALORESBLOQUECODIGO ::= SENTLLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALORESBLOQUECODIGO ::= SENTRETURN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALORESBLOQUECODIGO ::= RESERVBREAK ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALORESBLOQUECODIGO ::= ESTRUCTCONTROL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALORESBLOQUECODIGO ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBLOQUECODIGO",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ESTRUCTCONTROL ::= ESTRUCTWHILE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ESTRUCTCONTROL ::= ESTRUCTFORRANGE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ESTRUCTCONTROL ::= ESTRUCTSWITCH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ESTRUCTCONTROL ::= ESTRUCTIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ESTRUCTCONTROL",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA ::= FUNCESCRIBIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA ::= FUNCLEER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONDICIONES ::= SIGABREPARENT OPERACIONLOGICAS SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICIONES",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERACIONLOGICAS ::= SIGABREPARENT OPERACIONLOGICAS SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICAS",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERACIONLOGICAS ::= SIGNEGACION OPERANDOSLOGICOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICAS",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERACIONLOGICAS ::= OPERANDOSLOGICOS OPERADORESLOGICOS OPERANDOSLOGICOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONLOGICAS",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERANDOSLOGICOS ::= OPERACIONLOGICAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOSLOGICOS",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERANDOSLOGICOS ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOSLOGICOS",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERANDOSLOGICOS ::= LITBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOSLOGICOS",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERACIONRELAARIT ::= SIGABREPARENT OPERACIONRELAARIT SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONRELAARIT",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERACIONRELAARIT ::= OPERANDOSRELAARIT OPERADORESRELA OPERACIONRELAARIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONRELAARIT",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERACIONRELAARIT ::= OPERANDOSRELAARIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONRELAARIT",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERANDOSRELAARIT ::= VALORESARIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOSRELAARIT",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERADORESRELA ::= OPERADORESBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERADORESRELA ::= SIGMAYORIGUAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERADORESRELA ::= SIGMAYOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERADORESRELA ::= SIGMENORIGUAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERADORESRELA ::= SIGMENOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESRELA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERACIONBOOL ::= OPERANDOBOOLEANO OPERADORESBOOL OPERANDOBOOLEANO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONBOOL",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERANDOBOOLEANO ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOBOOLEANO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERANDOBOOLEANO ::= LITBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERANDOBOOLEANO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERADORESBOOL ::= SIGDIFERENTE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESBOOL",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERADORESBOOL ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESBOOL",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCESCRIBIR ::= FUNCESCRIBIRID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCESCRIBIR ::= FUNCESCRIBIRSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCESCRIBIR ::= FUNCESCRIBIRFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUNCESCRIBIR ::= FUNCESCRIBIRINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCESCRIBIRID ::= RESERVESCRIBIR SIGABREPARENT IDENTIFICADOR SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRID",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCESCRIBIRSTRING ::= RESERVESCRIBIR SIGABREPARENT LITSTRING SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRSTRING",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCESCRIBIRFLOAT ::= RESERVESCRIBIR SIGABREPARENT LITFLOAT SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRFLOAT",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCESCRIBIRINT ::= RESERVESCRIBIR SIGABREPARENT LITINT SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCESCRIBIRINT",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNCLEER ::= RESERVLEER SIGABREPARENT IDENTIFICADOR SIGCIERRAPARENT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCLEER",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VARIABLES ::= OPERACIONUNARIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VARIABLES ::= VARIABLESSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VARIABLES ::= VARIABLESCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VARIABLES ::= VARIABLESBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VARIABLES ::= VARIABLESFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VARIABLES ::= VARIABLESINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VARIABLESSTRING ::= CREAASIGVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESSTRING",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VARIABLESSTRING ::= CREAVARSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESSTRING",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CREAASIGVARSTRING ::= TIPOSTRING SEPARADOR IDENTIFICADOR SIGNOIGUAL VALORESSTRING ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARSTRING",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CREAVARSTRING ::= TIPOSTRING SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARSTRING",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VALORESSTRING ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESSTRING",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VALORESSTRING ::= LITSTRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESSTRING",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARIABLESCHAR ::= CREAASIGVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESCHAR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VARIABLESCHAR ::= CREAVARCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESCHAR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CREAASIGVARCHAR ::= TIPOCHAR SEPARADOR IDENTIFICADOR SIGNOIGUAL VALORESCHAR ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARCHAR",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CREAVARCHAR ::= TIPOCHAR SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARCHAR",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALORESCHAR ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESCHAR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALORESCHAR ::= LITCHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESCHAR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VARIABLESBOOL ::= CREAASIGVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESBOOL",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VARIABLESBOOL ::= CREAVARBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESBOOL",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CREAASIGVARBOOL ::= TIPOBOOL SEPARADOR IDENTIFICADOR SIGNOIGUAL SIGNEGACION VALORESBOOL ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARBOOL",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CREAASIGVARBOOL ::= TIPOBOOL SEPARADOR IDENTIFICADOR SIGNOIGUAL VALORESBOOL ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARBOOL",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CREAVARBOOL ::= TIPOBOOL SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARBOOL",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALORESBOOL ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBOOL",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALORESBOOL ::= LITBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESBOOL",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VARIABLESFLOAT ::= CREAASIGVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESFLOAT",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VARIABLESFLOAT ::= CREAVARFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESFLOAT",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CREAASIGVARFLOAT ::= TIPOFLOAT SEPARADOR IDENTIFICADOR SIGNOIGUAL OPERACIONARIT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARFLOAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CREAVARFLOAT ::= TIPOFLOAT SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARFLOAT",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VARIABLESINT ::= CREAASIGVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESINT",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VARIABLESINT ::= CREAVARINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESINT",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARIABLESINT ::= ASIGNVAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLESINT",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CREAASIGVARINT ::= TIPOINT SEPARADOR IDENTIFICADOR SIGNOIGUAL OPERACIONARIT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAASIGVARINT",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CREAVARINT ::= TIPOINT SEPARADOR IDENTIFICADOR ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CREAVARINT",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNVAR ::= IDENTIFICADOR SIGNOIGUAL OPERACIONARIT ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNVAR",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACIONARIT ::= SIGABREPARENT OPERACIONARIT SIGCIERRAPARENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONARIT",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACIONARIT ::= VALORESARIT OPERADORESARITME OPERACIONARIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONARIT",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACIONARIT ::= VALORESARIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONARIT",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALORESARIT ::= OPERAUNARIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALORESARIT ::= LLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALORESARIT ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = id; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALORESARIT ::= LITFLOAT 
            {
              Object RESULT =null;
		int litfloatleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litfloatright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litfloat = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litfloat.toString()+": "+"float"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VALORESARIT ::= LITINT 
            {
              Object RESULT =null;
		int litIntleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litIntright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litInt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litInt.toString()+": "+"int"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALORESARIT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERACIONUNARIA ::= OPERAUNARIA ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERACIONUNARIA",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPERAUNARIA ::= OPERADORESUNARIOS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERAUNARIA",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPERAUNARIA ::= IDENTIFICADOR OPERADORESUNARIOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERAUNARIA",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTRETURN ::= RESERVRETURN DATOSRETORNO ENDLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTRETURN",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DATOSRETORNO ::= LLAMARFUNC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DATOSRETORNO ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DATOSRETORNO ::= LITBOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DATOSRETORNO ::= LITFLOAT 
            {
              Object RESULT =null;
		int litfloatleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litfloatright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litfloat = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litfloat.toString()+": "+"float"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DATOSRETORNO ::= LITINT 
            {
              Object RESULT =null;
		int litIntleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int litIntright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object litInt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = litInt.toString()+": "+"int"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DATOSRETORNO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COMENTARIOS ::= COMENTARIOMULTIPLE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COMENTARIOS ::= COMENTARIOSIMPLE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OPERADORESUNARIOS ::= SIGDIMINU 
            {
              Object RESULT =null;
		 RESULT = "--";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESUNARIOS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OPERADORESUNARIOS ::= SIGAUMEN 
            {
              Object RESULT =null;
		 RESULT = "++";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESUNARIOS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OPERADORESLOGICOS ::= SIGDISYUNCION 
            {
              Object RESULT =null;
		 RESULT = "|";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPERADORESLOGICOS ::= SIGCONJUNCION 
            {
              Object RESULT =null;
		 RESULT = "&";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPERADORESARITME ::= SIGPOT 
            {
              Object RESULT =null;
		 RESULT = "^";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPERADORESARITME ::= SIGMOD 
            {
              Object RESULT =null;
		 RESULT = "%";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPERADORESARITME ::= SIGDIV 
            {
              Object RESULT =null;
		 RESULT = "/";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPERADORESARITME ::= SIGMULTI 
            {
              Object RESULT =null;
		 RESULT = "*";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPERADORESARITME ::= SIGSUMA 
            {
              Object RESULT =null;
		 RESULT = "+";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OPERADORESARITME ::= SIGRESTA 
            {
              Object RESULT =null;
		 RESULT = "-";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERADORESARITME",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LITBOOL ::= LITFALSE 
            {
              Object RESULT =null;
		 RESULT = "false"+": "+"bool"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITBOOL",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // LITBOOL ::= LITTRUE 
            {
              Object RESULT =null;
		 RESULT = "true"+": "+"bool"; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LITBOOL",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

